<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Rails项目搭建rabbitmq消息中间件]]></title>
      <url>/Mikasa-Ackerman.github.io/2019/01/18/Rails%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BArabbitmq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1111/2019/243dcedfb3893c477a585710f2918e86.jpg" alt=""><br><a id="more"></a></p>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>首先 安装 rabbitmq 到本机<br>Mac下 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install rabbitmq</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-server</div></pre></td></tr></table></figure></p>
<p>默认可以访问<a href="http://localhost:15672/#/" target="_blank" rel="external">http://localhost:15672/#/</a> web服务界面 会有默认的用户名guest和密码guest</p>
<p>如果想要使用其他用户 可以创建和修改并赋予权限</p>
<p>在本地项目启动 redis-server 启动 sidekiq 这里sidekiq 只是作为队列使用 有大量消息时 使用队列发送到mq</p>
<p>在生产消息的项目中安装gem  bunny 他是一个生产者可以帮你使用mq并创建信道和发送消息</p>
<p>在需要消费的项目中安装 sneaker 他是一个消费者 可以接收</p>
<p>rabbitmq的消费队列和exchange对应关系需在web 上手动操作<br>也可以在创建消费队列的时候配置</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from_queue <span class="string">'q.message.service.user_message.create'</span>,</div><div class="line">            <span class="symbol">durable:</span> <span class="literal">true</span>,</div><div class="line">            <span class="symbol">exchange:</span> <span class="string">'ex.message_service.user_message'</span>,</div><div class="line">            <span class="symbol">exchange_type:</span> <span class="string">'topic'</span>,</div><div class="line">            <span class="symbol">routing_key:</span> <span class="string">'message.create'</span></div></pre></td></tr></table></figure>
<p>这里配置好队列于exchange的关系</p>
<p>关于bunny和sneakers 的使用<a href="https://ruby-china.org/topics/35230" target="_blank" rel="external">这里</a>有教程</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rabbitmq:</span></div><div class="line"><span class="attr">   amqp:</span> <span class="string">'amqp://staging:rabbitdev@localhost:5672'</span>  <span class="comment"># 用户名:密码@本地的服务地址</span></div><div class="line"><span class="attr">   vhost:</span> <span class="string">'msgbus.staging.yiqiyin.com'</span> <span class="comment">#  vhost 虚拟主机名称</span></div><div class="line"><span class="attr">   timeout_job_after:</span> <span class="number">180</span> <span class="comment"># 3.minutes 超时时间</span></div><div class="line"><span class="attr">   daemonize:</span> <span class="literal">true</span>   <span class="comment"># 守护进程</span></div></pre></td></tr></table></figure>
<p>Sneakers worker 有修改的话每次都要重新启动一次 sneakers 服务</p>
<p>项目下 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rake sneakers:run</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先消息队列和中间件可以将很多不需要及时同步的操作在队列中执行，降低服务器等待时间和负载，并且微服务的模块保证自己模块做更简单的事情解耦，并且可以给对应的站点添加还是不添加此功能提供了很多的可选择性，比如注册成功邮件，激活邮箱邮件，发放优惠券等操作，<br>同时又要注意不要为了微服务而做微服务，还要考虑这样的架构如果在某一步消息丢失了或者执行失败了如何处理，sneakers有对应的异常处理机制，比如说有消息一直消费失败在重试一定次数后可以选择丢入dieline，等待后续查看失败原因等等。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> sneakers </tag>
            
            <tag> bunny </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用gem整理]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/12/18/%E5%B8%B8%E7%94%A8gem%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="记录自己工作中常用的gem"><a href="#记录自己工作中常用的gem" class="headerlink" title="记录自己工作中常用的gem"></a>记录自己工作中常用的gem</h3><a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql数据库</span></div><div class="line">gem <span class="string">'mysql2'</span></div><div class="line">gem <span class="string">'pg'</span></div><div class="line"></div><div class="line"><span class="comment"># markdown</span></div><div class="line">gem <span class="string">'redcarpet'</span></div><div class="line">gem <span class="string">'rouge'</span></div><div class="line"></div><div class="line"><span class="comment"># configuration</span></div><div class="line">gem <span class="string">'config'</span></div><div class="line"></div><div class="line"><span class="comment"># 工作流</span></div><div class="line">gem <span class="string">'aasm'</span></div><div class="line">gem <span class="string">'workflow'</span></div><div class="line"></div><div class="line"><span class="comment"># 队列相关</span></div><div class="line">gem <span class="string">'sidekiq'</span></div><div class="line">gem <span class="string">'sidekiq-failures'</span></div><div class="line">gem <span class="string">'sidekiq-limit_fetch'</span></div><div class="line"></div><div class="line"><span class="comment"># 定时任务</span></div><div class="line">gem <span class="string">'whenever'</span></div><div class="line"></div><div class="line"><span class="comment"># 面包屑</span></div><div class="line">gem <span class="string">'breadcrumbs_on_rails'</span></div><div class="line"></div><div class="line"><span class="comment"># 权限</span></div><div class="line">gem <span class="string">'cancancan'</span></div><div class="line">gem <span class="string">"pundit"</span></div><div class="line"></div><div class="line"><span class="comment"># 审计</span></div><div class="line">gem <span class="string">"audited"</span></div><div class="line">gem <span class="string">"audited-activerecord"</span></div><div class="line"></div><div class="line"><span class="comment"># 部署</span></div><div class="line">gem <span class="string">'puma'</span></div><div class="line">gem <span class="string">'mina'</span></div><div class="line"></div><div class="line"><span class="comment"># Excel处理</span></div><div class="line">gem <span class="string">'spreadsheet'</span></div><div class="line"></div><div class="line"><span class="comment"># 上传</span></div><div class="line">gem <span class="string">'carrierwave'</span></div><div class="line">gem <span class="string">'mini_magick'</span></div><div class="line"></div><div class="line"><span class="comment"># elasticsearch</span></div><div class="line">gem <span class="string">'searchkick'</span>, <span class="string">'1.3.3'</span></div><div class="line"></div><div class="line"><span class="comment"># 查询</span></div><div class="line">gem <span class="string">'ransack'</span></div><div class="line"></div><div class="line"><span class="comment"># 调试</span></div><div class="line">gem <span class="string">'pry-rails'</span></div><div class="line">gem <span class="string">'pry-byebug'</span></div><div class="line"></div><div class="line"><span class="comment"># 分页</span></div><div class="line">gem <span class="string">'kaminari'</span></div><div class="line"></div><div class="line"><span class="comment"># 消息队列</span></div><div class="line">gem <span class="string">'bunny'</span></div><div class="line"></div><div class="line"><span class="comment"># redis cache</span></div><div class="line">gem <span class="string">'redis-namespace'</span></div><div class="line">gem <span class="string">'redis-rails'</span></div><div class="line"></div><div class="line"><span class="comment"># tag</span></div><div class="line">gem <span class="string">'acts-as-taggable-on'</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> gem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/12/18/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="拉取远端分支"><a href="#拉取远端分支" class="headerlink" title="拉取远端分支"></a>拉取远端分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D 分支名</div></pre></td></tr></table></figure>
<h3 id="删除远端分支"><a href="#删除远端分支" class="headerlink" title="删除远端分支"></a>删除远端分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete 分支名</div></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout branch</div></pre></td></tr></table></figure>
<h3 id="回到某次提交"><a href="#回到某次提交" class="headerlink" title="回到某次提交"></a>回到某次提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD^</div></pre></td></tr></table></figure>
<h3 id="合并commit到本分支"><a href="#合并commit到本分支" class="headerlink" title="合并commit到本分支"></a>合并commit到本分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge --commit</div></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge branch</div></pre></td></tr></table></figure>
<h3 id="暂存未提交更改"><a href="#暂存未提交更改" class="headerlink" title="暂存未提交更改"></a>暂存未提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<h3 id="从暂存区取出修改"><a href="#从暂存区取出修改" class="headerlink" title="从暂存区取出修改"></a>从暂存区取出修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply</div></pre></td></tr></table></figure>
<h3 id="查看当前修改"><a href="#查看当前修改" class="headerlink" title="查看当前修改"></a>查看当前修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL分类统计]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/11/21/SQL%E5%88%86%E7%B1%BB%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="用SQL分类统计来避免循环"><a href="#用SQL分类统计来避免循环" class="headerlink" title="用SQL分类统计来避免循环"></a>用SQL分类统计来避免循环</h2><blockquote>
<p>假设有一张表 users, 其中category字段表示用户的类型，假设 99 代表管理员，1代表门店，2代表工厂，当我们要统计 每个类型的人数的时候可以这样统计</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">99</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'admin'</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'formal'</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'factory'</span></div><div class="line"><span class="keyword">from</span> <span class="keyword">users</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果不使用分类统计的话可能要将用户查询出来进行遍历叠加的方式算出每种类型的人有多少个</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin   formal   factory</div><div class="line">8        1846     28</div></pre></td></tr></table></figure>
<blockquote>
<p>用分类统计一条SQL 就可以统计出结果。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现一个ftp连接池]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/09/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAftp%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h3><h5 id="项目中使用Net-FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要-执行："><a href="#项目中使用Net-FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要-执行：" class="headerlink" title="项目中使用Net::FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要 执行："></a>项目中使用Net::FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要 执行：</h5><p>1.创建client</p>
<p>2.连接</p>
<p>3.登录</p>
<p>4.上传文件</p>
<p>5.关闭client<br><a id="more"></a></p>
<h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><h5 id="希望能像ftp软件类似-filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）"><a href="#希望能像ftp软件类似-filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）" class="headerlink" title="希望能像ftp软件类似 filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）"></a>希望能像ftp软件类似 filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）</h5><h3 id="想法："><a href="#想法：" class="headerlink" title="想法："></a>想法：</h3><p> 1.实现一个连接池</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'net/ftp'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpPool</span></span></div><div class="line">  <span class="keyword">include</span> Singleton</div><div class="line"></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:connections</span></div><div class="line"></div><div class="line">  semaphore = Mutex.new</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">    @connections = &#123;&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_connection</span><span class="params">(ftp_server)</span></span></div><div class="line">    key = <span class="string">"<span class="subst">#&#123;ftp_server.address&#125;</span><span class="subst">#&#123;ftp_server.port&#125;</span><span class="subst">#&#123;ftp_server.username&#125;</span>"</span></div><div class="line"></div><div class="line">    semaphore.synchronize&#123;</div><div class="line">      client = @connections[key] <span class="params">||</span> @connections[key] = Net::FTP.new</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">begin</span></div><div class="line">      client.noop</div><div class="line">    <span class="keyword">rescue</span> Exception =&gt; e</div><div class="line">      reconnect(ftp_server, client)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    client</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reconnect</span><span class="params">(ftp_server, client)</span></span></div><div class="line">    client.connect(ftp_server.address, ftp_server.port)</div><div class="line">    client.login(ftp_server.username, ftp_server.password)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里假设传入一个 ftpserver 附带四个属性 分别是地址，端口，账号和密码；<br>用前三个属性简单的生成一个key测试一下</p>
<p>首先生成一个 ftp_pool</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; ftp_pool = FtpPool.instance</div><div class="line">=&gt; <span class="comment">#&lt;FtpPool:0x007fba931af310 @connections=&#123;&#125;&gt;</span></div></pre></td></tr></table></figure>
<p>然后调用get_connection 从连接池中获取一个连接，如果没有就新建一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ftp_pool.get_connection(ftp_server)</div><div class="line">=&gt; <span class="comment">#&lt;Net::FTP:0x007fa1502147a8</span></div><div class="line"> @binary=<span class="literal">true</span>,</div><div class="line"> @debug_mode=<span class="literal">false</span>,</div><div class="line"> @last_response=<span class="string">"200 OK\n"</span>,</div><div class="line"> @last_response_code=<span class="string">"200"</span>,</div><div class="line"> @logged_in=<span class="literal">true</span>,</div><div class="line"> @mon_count=0,</div><div class="line"> @mon_mutex=<span class="comment">#&lt;Thread::Mutex:0x007fa150214708&gt;,</span></div><div class="line"> @mon_owner=nil,</div><div class="line"> @open_timeout=nil,</div><div class="line"> @passive=<span class="literal">true</span>,</div><div class="line"> @read_timeout=60,</div><div class="line"> @resume=<span class="literal">false</span>,</div><div class="line"> @sock=<span class="comment">#&lt;Net::FTP::BufferedSocket io=#&lt;TCPSocket:0x007fa1511cf918&gt;&gt;,</span></div><div class="line"> @welcome=<span class="string">"230 Logged on\n"</span>&gt;</div></pre></td></tr></table></figure>
<p>这样我们就获得了一个 Net::FTP 的 client<br>可以使用然后我们用这个client 发送文件到ftp服务器，如果发送失败通过抓取异常，<br>如果异常是未连接或者未登录，就重新执行连接和登录名令后在发送文件即可。<br>这样一个简单的 ftp_pool 就可以运行了</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> FTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails在线视频播放]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/04/26/rails%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<h2 id="rails网站实现在线视频播放"><a href="#rails网站实现在线视频播放" class="headerlink" title="rails网站实现在线视频播放"></a>rails网站实现在线视频播放</h2><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/656/2018/2da9e44c6a2c6dd28a2d1fa6bc67a7b8.jpg" alt=""><br><a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>播放器使用 <a href="http://dplayer.js.org/#/" target="_blank" rel="external">DPlayer</a>一个好用的弹幕视频播放器。</p>
<p>首先将js文件下载后引用 application.js中添加</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//= require DPlayer.min</span></div></pre></td></tr></table></figure>
<blockquote>
<p>页面中添加</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">const</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span></div><div class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'dplayer'</span>),</span></div><div class="line"><span class="undefined">    video: &#123;</span></div><div class="line"><span class="javascript">      url: <span class="string">"&lt;%= @match.get_video_url.html_safe %&gt;"</span>,</span></div><div class="line"><span class="javascript">      pic: <span class="string">"&lt;%= @match.get_pic_url.html_safe %&gt;"</span>,</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>url 是可播放的视频地址, pic 是视频的封面图片<br>如果相接弹幕也是可以的，可以点连接后仔细了解，非常好用的视频播放器。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> Dplayer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现拖拽排序]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/04/24/%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="如何在rails-中添加拖拽排序"><a href="#如何在rails-中添加拖拽排序" class="headerlink" title="如何在rails 中添加拖拽排序"></a>如何在rails 中添加拖拽排序</h2><p><img src="https://www.gadgetdaily.xyz/wp-content/uploads/2015/01/jqueryui-2.png" alt=""><br><a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>需要使用的gem</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'acts_as_list'</span></div><div class="line">gem <span class="string">'jquery-ui-rails'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要的js文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//= require jquery-ui/jquery-ui.js</span></div></pre></td></tr></table></figure>
<blockquote>
<p>页面添加想要排序的列表</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>视频编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">data-url</span>=<span class="string">"&lt;%= sort_admin_round_manage_good_videos_path %&gt;"</span> <span class="attr">data-behavior</span>=<span class="string">'sortable'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> @<span class="attr">good_videos.each_with_index</span> <span class="attr">do</span> |<span class="attr">g</span>, <span class="attr">index</span>| %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"&lt;%= dom_id(g) %&gt;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">g.id</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">operate_buttons</span>(<span class="attr">good_video_operation</span>(<span class="attr">g</span>)) %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$( <span class="string">"[data-behavior='sortable']"</span> ).sortable(&#123;</span></div><div class="line"><span class="javascript">  update: <span class="function"><span class="keyword">function</span>(<span class="params">e, ui</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    $.ajax(&#123;</span></div><div class="line"><span class="javascript">      url: $(<span class="keyword">this</span>).data(<span class="string">"url"</span>),</span></div><div class="line"><span class="javascript">      type: <span class="string">"PATCH"</span>,</span></div><div class="line"><span class="javascript">      data: $(<span class="keyword">this</span>).sortable(<span class="string">'serialize'</span>)</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第一种方式我们将排序后的序列整体发送到后台,后台需要添加响应的排序字段</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rails g migration AddPositionToGoodVideo position:integer</div><div class="line">rails db:migrate</div></pre></td></tr></table></figure>
<blockquote>
<p>控制器添加列表和排序action</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></div><div class="line">  @q = GoodVideo.ransack(params[<span class="symbol">:q</span>])</div><div class="line">  @good_videos = @q.result.order(<span class="symbol">position:</span> <span class="symbol">:desc</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 这里使用第一种排序方式(优点：如果position值为空或者0，在经过之后将会按排序赋值，缺点：每次排序根据当前页面数据量生成大量sql，大量操作不建议使用。)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span></span></div><div class="line">  params[<span class="symbol">:good_video</span>].reverse.each_with_index <span class="keyword">do</span> <span class="params">|id, index|</span></div><div class="line">    GoodVideo.find_by(<span class="symbol">id:</span> id).update(<span class="symbol">position:</span> index + <span class="number">1</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  head <span class="symbol">:ok</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>路由配置</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resources <span class="symbol">:good_videos</span> <span class="keyword">do</span></div><div class="line">  collection <span class="keyword">do</span></div><div class="line">    patch <span class="symbol">:sort</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>总结：第一种方法 这样既可实现拖拽排序（这种方法弊端：如果有分页的话第二页的排序会有问题，所以这种排序是不可以有分页的，所有数据只能在一个页面，也就限制了不适用太大的数据量和频繁的操作。）</p>
</blockquote>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><blockquote>
<p>页面基本保持一致 js 有一些变化,这里我们获取了当前拖拽元素id释放后的位置的前后元素的id</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"[data-behavior='sortable']"</span> ).sortable(&#123;</div><div class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">e, ui</span>) </span>&#123;</div><div class="line">    params = <span class="string">"prev_id="</span> + $(ui.item[<span class="number">0</span>]).prev().attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>] + <span class="string">"&amp;id="</span> + $(ui.item[<span class="number">0</span>]).attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>] + <span class="string">"&amp;next_id="</span> + $(ui.item[<span class="number">0</span>]).next().attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>];</div><div class="line">    $.ajax(&#123;</div><div class="line">      url: $(<span class="keyword">this</span>).data(<span class="string">"url"</span>),</div><div class="line">      type: <span class="string">"PATCH"</span>,</div><div class="line">      data: params</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>排序方法也有相应修改并且position字段应采用decimal类型长度应尽量长一些，防止因长度不够，而造成多个position 都为 0.00的情况；对移动到第一位，或者最后一位做if处理。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span></span></div><div class="line">  good_video = GoodVideo.find(params[<span class="symbol">:id</span>])</div><div class="line">  next_task = params[<span class="symbol">:next_id</span>] &amp;&amp; GoodVideo.find(params[<span class="symbol">:next_id</span>])</div><div class="line">  prev_task = params[<span class="symbol">:prev_id</span>] &amp;&amp; GoodVideo.find(params[<span class="symbol">:prev_id</span>])</div><div class="line">  position = <span class="keyword">if</span> params[<span class="symbol">:prev_id</span>].blank?</div><div class="line">               next_task.position / <span class="number">2</span></div><div class="line">             <span class="keyword">elsif</span> params[<span class="symbol">:next_id</span>].blank?</div><div class="line">               prev_task.position + <span class="number">100000</span></div><div class="line">             <span class="keyword">else</span></div><div class="line">               (prev_task.position + next_task.position) / <span class="number">2</span></div><div class="line">             <span class="keyword">end</span></div><div class="line">  good_video.update(<span class="symbol">position:</span> position)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>总结：第二种方法排序生成的sql更少，仅仅通过上一位置和下一位置来生当前选择元素的排序值。分页的话也不会有问题，不过对于很多初始值就是0.0的排序来将不会给赋值，要手动拖拽后才会生成排序值。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> rails </tag>
            
            <tag> jquery </tag>
            
            <tag> jquery-ui </tag>
            
            <tag> sortable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails项目生成二维码]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/01/19/rails%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="Rails-项目中将连接生成二维码"><a href="#Rails-项目中将连接生成二维码" class="headerlink" title="Rails 项目中将连接生成二维码"></a>Rails 项目中将连接生成二维码</h3><a id="more"></a>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><blockquote>
<p><code>Gemfile</code>中添加</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'rqrcode_png'</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成二维码</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_rqrcode</span></span></div><div class="line">    html = <span class="string">""</span></div><div class="line">    <span class="keyword">require</span> <span class="string">'rqrcode'</span></div><div class="line">    host = <span class="string">"https://www.baidu.com"</span> <span class="comment"># 链接地址</span></div><div class="line">    qr = RQRCode::QRCode.new(host, <span class="symbol">:size</span> =&gt; <span class="number">10</span>, <span class="symbol">:level</span> =&gt; <span class="symbol">:h</span> )</div><div class="line">    html &lt;&lt;</div><div class="line">    <span class="string">"<span class="subst">#&#123;qr.as_svg(<span class="symbol">offset:</span> <span class="number">0</span>, <span class="symbol">color:</span> <span class="string">'000'</span>,</span></span></div><div class="line"><span class="string"><span class="subst">                 <span class="symbol">shape_rendering:</span> <span class="string">'crispEdges'</span>,</span></span></div><div class="line"><span class="string"><span class="subst">                 <span class="symbol">module_size:</span> <span class="number">2</span>)&#125;</span>"</span></div><div class="line">   <span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 二维码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails导出电子表格]]></title>
      <url>/Mikasa-Ackerman.github.io/2018/01/10/rails%E5%AF%BC%E5%87%BA%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h4 id="如何在rails应用中导出电子表格"><a href="#如何在rails应用中导出电子表格" class="headerlink" title="如何在rails应用中导出电子表格"></a>如何在<code>rails</code>应用中导出电子表格</h4><p><img src="https://www.edx.org/sites/default/files/course/image/promoted/analyzing_and_visualizing_data_with_excel_378x225.jpg" alt=""><br><a id="more"></a><br>在 <code>Gemfile</code> 中添加<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'spreadsheet'</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>假设我们要导出 项目数据：</p>
<p><code>controller</code> 中添加导出：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exprot</span></span></div><div class="line">  projects = Project.limit(<span class="number">10</span>)</div><div class="line">  send_data(Project.exprot_projects(projects), <span class="symbol">:type</span> =&gt; <span class="string">"text/excel;charset=utf-8; header=present"</span>, <span class="symbol">:filename</span> =&gt; <span class="string">"项目统计表.xls"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><code>model</code> 中添加想要导出的数据格式<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">exprot_pojects</span><span class="params">(projects)</span></span></div><div class="line">  xls_report = StringIO.new</div><div class="line">  Spreadsheet.client_encoding = <span class="string">"UTF-8"</span></div><div class="line">  book = Spreadsheet::Workbook.new</div><div class="line">  style<span class="number">0</span> = Spreadsheet::Format.new <span class="symbol">:weight</span> =&gt; <span class="symbol">:bold</span>, <span class="symbol">:size</span> =&gt; <span class="number">16</span>, <span class="symbol">:align</span> =&gt; <span class="symbol">:center</span></div><div class="line">  style = Spreadsheet::Format.new <span class="symbol">:weight</span> =&gt; <span class="symbol">:bold</span>, <span class="symbol">:size</span> =&gt; <span class="number">10</span></div><div class="line">  sheet1 = book.create_worksheet <span class="symbol">:name</span> =&gt; <span class="string">"项目统计表.xls"</span></div><div class="line">  <span class="comment"># 设置单元格高度</span></div><div class="line">  sheet1.row(<span class="number">0</span>).height = <span class="number">18</span></div><div class="line">  sheet1.row(<span class="number">0</span>).default_format = style</div><div class="line">  <span class="comment"># 设置单元格宽度</span></div><div class="line">  sheet1.column(<span class="number">0</span>).width = <span class="number">15</span></div><div class="line">  sheet1.column(<span class="number">1</span>).width = <span class="number">15</span></div><div class="line">  sheet1.row(<span class="number">0</span>).concat [<span class="string">"项目名称"</span>,<span class="string">"项目编号"</span>]</div><div class="line"></div><div class="line">  projects.each_with_index <span class="keyword">do</span> <span class="params">|project, index|</span></div><div class="line">    sheet1.row(index+<span class="number">1</span>).concat [project.name, project.number]</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  book.write xls_report</div><div class="line">  xls_report.string</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>这样在controller中调用此方法，或者传入想要导出的集合就可以导出了</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> excel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（二）]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/11/20/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3942457143,1284096136&amp;fm=27&amp;gp=0.jpg" alt=""><br><a id="more"></a></p>
<p>最近有朋友有问我<code>ActiveRecord</code>中 <code>scope</code> 和 <code>validate</code> 方法的实现机制，之前一直在使用它但是我还真的没有细细的了解过这个方法，于是决定深入探究一下。</p>
<h4 id="scope-name-scope-options-public"><a href="#scope-name-scope-options-public" class="headerlink" title="scope(name, scope_options = {}) public"></a>scope(name, scope_options = {}) public</h4><blockquote>
<p>添加一个用于检索和查询对象的类方法。</p>
</blockquote>
<p>可以这样使用：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shirt</span> &lt; ActiveRecord::Base</span></div><div class="line">  scope <span class="symbol">:red</span>, where(<span class="symbol">:color</span> =&gt; <span class="string">'red'</span>)</div><div class="line">  scope <span class="symbol">:end_date</span>, -&gt;(date) &#123; where(<span class="symbol">:end_date</span> =&gt; date) &#125;</div><div class="line">  scope <span class="symbol">:dry_clean_only</span>, joins(<span class="symbol">:washing_instructions</span>).where(<span class="string">'washing_instructions.dry_clean_only = ?'</span>, <span class="literal">true</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面的调用<code>scope</code>定义了类方法<code>Shirt.red</code>和<code>Shirt.dry_clean_only</code>。 <code>Shirt.red</code>实际上代表查询<code>Shirt.where(:color =&gt;&#39;red&#39;)</code>。<br>请注意，这只是用于定义实际类方法的<code>语法糖</code></p>
</blockquote>
<p>实现的作用和类方法一样，但是类方法是在载入类的时候就会一起加载，而<code>scope</code> 定义的方法是在方法调用时才会加载<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shirt</span> &lt; ActiveRecord::Base</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">red</span></span></div><div class="line">    where(<span class="symbol">color:</span> <span class="string">'red'</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>不过需要注意的是，<code>scope</code>方法即使在什么也没查到的情况下依然会返回<code>Relation</code>对象，也就是说 <code>scope</code> 方法可以进行链式调用而不担心会抛出<code>nil:NilClass</code> 异常。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> &lt; ActiveRecord::Base</span></div><div class="line">  scope <span class="symbol">:published</span>, -&gt; &#123; where(<span class="symbol">published:</span> <span class="literal">true</span>) &#125;</div><div class="line">  scope <span class="symbol">:featured</span>, -&gt; &#123; where(<span class="symbol">featured:</span> <span class="literal">true</span>) &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">latest_article</span></span></div><div class="line">    order(<span class="string">'published_at desc'</span>).first</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">titles</span></span></div><div class="line">    pluck(<span class="symbol">:title</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我们可以这样调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Article.published.featured.latest_article</div><div class="line">Article.featured.titles</div></pre></td></tr></table></figure></p>
<p>下面看一下具体的实现源码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># File activerecord/lib/active_record/scoping/named.rb, line 141</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope</span><span class="params">(name, body, &amp;block)</span></span></div><div class="line">  <span class="keyword">unless</span> body.respond_to?(<span class="symbol">:call</span>)</div><div class="line">    raise ArgumentError, <span class="string">'The scope body needs to be callable.'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> dangerous_class_method?(name)</div><div class="line">    raise ArgumentError, <span class="string">"You tried to define a scope named \"<span class="subst">#&#123;name&#125;</span>\" "</span>                <span class="string">"on the model \"<span class="subst">#&#123;<span class="keyword">self</span>.name&#125;</span>\", but Active Record already defined "</span>                <span class="string">"a class method with the same name."</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  extension = Module.new(&amp;block) <span class="keyword">if</span> block</div><div class="line"></div><div class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></div><div class="line">    scope = all.scoping &#123; body.call(*args) &#125;</div><div class="line">    scope = scope.extending(extension) <span class="keyword">if</span> extension</div><div class="line"></div><div class="line">    scope <span class="params">||</span> all</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>除去数据验证以外，值得关注的方法就是<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">singleton_class.send(<span class="symbol">:define_method</span>, name)</div></pre></td></tr></table></figure></p>
<p>这一句实现了将传入的方法名定义成一个类方法的过程，我们试着简易的实现以下<code>scope</code> 方法的原理</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">scope</span><span class="params">(name, body)</span></span></div><div class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name, &amp;body)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>参数接受名字和代码块，然后将名字定义为方法名，代码块作为方法内部可执行代码。这样我们就简易的实现了<code>scope</code>这个方法。</p>
<p>这时候scope 的内部实现机制就算比较了解了，但是我对这个<code>singleton_class</code> 非常好奇，它是如何实现的呢？</p>
<h4 id="singleton-class-→-class"><a href="#singleton-class-→-class" class="headerlink" title="singleton_class → class"></a>singleton_class → class</h4><blockquote>
<p>返回obj的单例类。 如果obj没有，则此方法创建一个新的单例类。<br>如果obj为nil，true或false，则分别返回NilClass，TrueClass或FalseClass。 如果obj是一个Fixnum或一个符号，它会引发一个TypeError。</p>
</blockquote>
<p>我们可以这么用它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object.new.singleton_class  #=&gt; #&lt;Class:#&lt;Object:0xb7ce1e24&gt;&gt;</div><div class="line">String.singleton_class      #=&gt; #&lt;Class:String&gt;</div><div class="line">nil.singleton_class         #=&gt; NilClass</div></pre></td></tr></table></figure></p>
<p>那么<code>scope</code> 就算是告一段落，算是浅尝辄止，下次我们要仔细的研究一下<code>singleton_class</code>，下一步看看<code>validate</code>的实现机制。</p>
<h4 id="validate-methods-amp-block-public"><a href="#validate-methods-amp-block-public" class="headerlink" title="validate(*methods, &amp;block) public"></a>validate(*methods, &amp;block) public</h4><blockquote>
<p>向类中添加验证方法或块。 当重写#validate实例方法变得过于强硬时，这是很有用的，而且您正在寻找更多关于验证的描述性声明。<br>这可以通过一个指向方法的符号来完成：</p>
</blockquote>
<p>这个非常常用的校验方法，我们经常这样用：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ActiveRecord::Base</span></div><div class="line">  validate <span class="symbol">:must_be_friends</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">must_be_friends</span></span></div><div class="line">    errors.add_to_base(<span class="string">"Must be friends to leave a comment"</span>) <span class="keyword">unless</span> commenter.friend_of?(commentee)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>或者用一个传递当前记录的块进行验证：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ActiveRecord::Base</span></div><div class="line">  validate <span class="keyword">do</span> <span class="params">|comment|</span></div><div class="line">    comment.must_be_friends</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">must_be_friends</span></span></div><div class="line">    errors.add_to_base(<span class="string">"Must be friends to leave a comment"</span>) <span class="keyword">unless</span> commenter.friend_of?(commentee)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>看得出这里 参数接受方法或者代码块，然后定义了一个实例方法，当实例不满足校验条件时，将会抛出异常。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（一）]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/11/14/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511244769207&amp;di=97fe709abd32e51b037c5bf3d37b8e4b&amp;imgtype=0&amp;src=http%3A%2F%2Ftc.sinaimg.cn%2Fmaxwidth.2048%2Ftc.service.weibo.com%2Fp3_pstatp_com%2Fe59d73299cfdc86f63ef07248bad7bd3.jpg" alt=""><br><a id="more"></a></p>
<p>记录一下自己在工作当中会用到 的一些比较好用的方法</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="step"><a href="#step" class="headerlink" title="step"></a>step</h4><p><code>ruby2.X</code> 中我们这么用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; range = 1..10</div><div class="line">=&gt; 1..10</div><div class="line">pry(main)&gt; range.step(2) &#123;|x| puts x&#125;</div><div class="line">1</div><div class="line">3</div><div class="line">5</div><div class="line">7</div><div class="line">9</div><div class="line">=&gt; 1..10</div></pre></td></tr></table></figure></p>
<ul>
<li>创建一个1-10差为2的等差数列，有时也可以这么用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; 0.step(10, 2) &#123;|x| puts x&#125;</div><div class="line">0</div><div class="line">2</div><div class="line">4</div><div class="line">6</div><div class="line">8</div><div class="line">10</div><div class="line">=&gt; 0</div></pre></td></tr></table></figure>
<p>和上面的方法是一样的作用。</p>
<h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><ul>
<li>将字符串当做代码执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; str = &quot;hello&quot;</div><div class="line">=&gt; &quot;hello&quot;</div><div class="line">pry(main)&gt; eval &quot;str + &apos; Fred&apos;&quot;</div><div class="line">=&gt; &quot;hello Fred&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="camelize-amp-underscore"><a href="#camelize-amp-underscore" class="headerlink" title="camelize &amp; underscore"></a>camelize &amp; underscore</h4><p>蛇形和驼峰的互换</p>
<ul>
<li>camelize将蛇形转换为驼峰</li>
<li>underscore将驼峰转换为蛇形</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &apos;user_mailer&apos;.camelize</div><div class="line">=&gt; &quot;UserMailer&quot;</div><div class="line">pry(main)&gt; &quot;UserMailer&quot;.underscore</div><div class="line">=&gt; &quot;user_mailer&quot;</div></pre></td></tr></table></figure>
<p>采用正则转换</p>
<h4 id="constantize"><a href="#constantize" class="headerlink" title="constantize"></a>constantize</h4><p>将驼峰转换为类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &quot;UserMailer&quot;.constantize</div><div class="line">=&gt; UserMailer</div><div class="line">pry(main)&gt; &quot;UserMailer&quot;.constantize.class</div><div class="line">=&gt; Class</div></pre></td></tr></table></figure>
<p>如果想要转换的类不存在，将会抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &quot;AserMailer&quot;.constantize.class</div><div class="line">NameError: uninitialized constant AserMailer</div></pre></td></tr></table></figure></p>
<h4 id="reduce-amp-inject"><a href="#reduce-amp-inject" class="headerlink" title="reduce &amp; inject"></a>reduce &amp; inject</h4><p>官方示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; (5..10).reduce(:+)</div><div class="line">=&gt; 45</div><div class="line">pry(main)&gt; (5..10).inject &#123;|sum, n| sum + n &#125;</div><div class="line">=&gt; 45</div><div class="line">pry(main)&gt; (5..10).reduce(1, :*)</div><div class="line">=&gt; 151200</div><div class="line">pry(main)&gt; (5..10).inject(1) &#123;|product, n| product * n &#125;</div><div class="line">=&gt; 151200</div></pre></td></tr></table></figure></p>
<p>这两个方法在使用上看起来不太一样，但是在结果上是一致的。</p>
<h4 id="map-amp"><a href="#map-amp" class="headerlink" title="map(&amp;:)"></a>map(&amp;:)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(5..10).map(&amp;:to_s)</div><div class="line">=&gt; [&quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]</div><div class="line">(5..10).map &#123;|i| i.to_s &#125;</div><div class="line">=&gt; [&quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]</div></pre></td></tr></table></figure>
<h4 id="hash-invert"><a href="#hash-invert" class="headerlink" title="hash.invert"></a>hash.invert</h4><p>互换hash 键和值的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &#123;&quot;1&quot;=&gt;&quot;hello&quot;, &quot;2&quot;=&gt;&quot;dear&quot;&#125;.invert</div><div class="line">=&gt; &#123;&quot;hello&quot;=&gt;&quot;1&quot;, &quot;dear&quot;=&gt;&quot;2&quot;&#125;</div></pre></td></tr></table></figure>
<h4 id="array-zip"><a href="#array-zip" class="headerlink" title="array.zip"></a>array.zip</h4><p>将两个一维数组转换为二维数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; %w(供应商 供应商1 供应商2).zip([1, 2, 3])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2], [&quot;供应商2&quot;, 3]]</div><div class="line">pry(main)&gt; %w(供应商 供应商1 供应商2).zip([1, 2])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2], [&quot;供应商2&quot;, nil]]</div><div class="line">pry(main)&gt; %w(供应商 供应商1).zip([1, 2, 3])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2]]</div></pre></td></tr></table></figure>
<p>重新生成的数组长度以第一个数组为准，后者缺少的值以<code>nil</code>代替，后者多余的会直接丢弃。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提问的智慧]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/10/31/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      <content type="html"><![CDATA[<p>提问的智慧</p>
<p>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</p>
<p><a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="external">https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>
<p>初入ruby china 后就阅读过，偶尔还是会再次的拿出来看一看。每一次看后都有新的思路出现。值得一看。<br><a id="more"></a></p>
<blockquote>
<p>这是一篇长文，看完需要十几分钟的时间。如果之前没有认真看过并且思考过，这十几分钟会改变你的职业生涯。这文章可能会出现一些让人不适的词语或者过时的例子，但我认为这不会影响它要表达的内容，而你需要好好琢磨作者的思想。</p>
<p>《提问的智慧》是一个敲门砖，它把黑客间的礼仪和准则明白地写下来，让我们了解到一个事实，为什么那些看起来很牛的人几乎从不提问。其实他们也有问题，但是通常在提问之前就自己解决了。不是因为他们本来就牛，而是解决问题的经历让他们成为牛人。最终，你只会看到网络上多了一篇文章：关于解决XXX问题的方案。</p>
<p>要不要花十几分钟改变自己的人生，决定权在自己。 – RubyChina  @Rei</p>
</blockquote>
<p><a href="https://ruby-china.org/topics/24325" target="_blank" rel="external">原文链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用githooks让博客实现自动部署]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/10/27/%E5%88%A9%E7%94%A8githooks%E8%AE%A9%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>为了不让这个vps太过于浪费，不让自己名字命名的域名浪费了，所以决定搭建一个博客在这里。整理一下搭建的过程当做记录。</p>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>一台服务器，一台可以连接服务器的电脑<br><a id="more"></a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这里采用了hexo作为静态页面生成器，hexo的使用教程请点击这里<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external">hexo使用文档</a></p>
<h2 id="服务器nginx配置"><a href="#服务器nginx配置" class="headerlink" title="服务器nginx配置"></a>服务器nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  root /home/wwwroot/hexo;  #网站根目录,用来存储网站文件</div><div class="line">  index index.html index.htm;</div><div class="line">  server_name www.qingyu.ren;   #你的域名</div><div class="line">  location / &#123;</div><div class="line">    try_files $uri $uri/ /index.html;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Git-hooks-post-receive-配置"><a href="#Git-hooks-post-receive-配置" class="headerlink" title="Git hooks post-receive 配置"></a>Git hooks post-receive 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash -l</div><div class="line">GIT_REPO=/home/git/hexo.git # git 仓库</div><div class="line">TMP_GIT_CLONE=/git/tmp/hexo_tmp</div><div class="line">PUBLIC_WWW=/home/wwwroot/hexo  # 网站存放目录</div><div class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</div><div class="line">git clone $GIT_REPO $TMP_GIT_CLONE</div><div class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</div><div class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</div></pre></td></tr></table></figure>
<p>这个文件要加上可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure></p>
<p>改变hexo.git的所属用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R git:git blog.git</div></pre></td></tr></table></figure></p>
<h2 id="将本地ssh公钥上传到服务器"><a href="#将本地ssh公钥上传到服务器" class="headerlink" title="将本地ssh公钥上传到服务器"></a>将本地ssh公钥上传到服务器</h2><p>将 本机<code>~/.ssh/id_rsa.pub</code>里的内容复制到 服务器 <code>~/.ssh/authorized_keys</code>里面<br>这样就可以不用密码登录了</p>
<h2 id="本地项目配置-config-yml"><a href="#本地项目配置-config-yml" class="headerlink" title="本地项目配置 _config.yml"></a>本地项目配置 _config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  message: update</div><div class="line">  repo: ssh://git@你的域名:端口/~/hexo.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>这样在写完blog 的时候 执行hexo d 就会自动部署了</p>
]]></content>
      
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为服务器安装中文字体]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/10/26/%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<h2 id="给服务器安装中文字体"><a href="#给服务器安装中文字体" class="headerlink" title="给服务器安装中文字体"></a>给服务器安装中文字体</h2><p>rails上的一个html生成pdf功能在mac环境下生成了正常的pdf，但是部署到服务器后生成的pdf出现了乱码，<br>分析乱码后发现 数字和英文字母还在，只有汉字不见了，所以判断是服务器没有安装中文字体的缘故。<br>这里安装两种开源的中文字体 文泉驿微米黑和文泉驿正黑字体。<br><a id="more"></a><br>服务器系统是 redhat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install wqy-microhei-fonts wqy-zenhei-fonts</div></pre></td></tr></table></figure>
<p>安装后生成pdf 就正常了。</p>
]]></content>
      
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为rails 项目搭建elasticsearch服务]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/09/06/%E4%B8%BArails-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BAelasticsearch%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="为-rails-本地项目搭建-elasticsearch-服务"><a href="#为-rails-本地项目搭建-elasticsearch-服务" class="headerlink" title="为 rails 本地项目搭建  elasticsearch  服务"></a>为 rails 本地项目搭建  elasticsearch  服务</h2><h3 id="首先安装-elasticsearch-服务"><a href="#首先安装-elasticsearch-服务" class="headerlink" title="首先安装  elasticsearch  服务"></a>首先安装  elasticsearch  服务</h3><p>OSX  系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew install elasticsearch@2.4</div><div class="line">brew services start elasticsearch</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>测试服务是否启动<br>浏览器输入 localhost:9200<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;Lynx&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch_marin&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;acE95aJmQxuMz0cx47b2WQ&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;2.4.6&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;5376dca9f70f3abef96a77f4bb22720ace8240fd&quot;,</div><div class="line">    &quot;build_timestamp&quot; : &quot;2017-07-18T12:17:44Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;5.5.4&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>出现类似上述信息 number 表示当前  elasticsearch  的版本号，需要注意的是  elasticsearch  现在分为 v2+ 和 v5+  两个版本，要根据自己的版本来选择  searchkick  对应的版本是否合适</p>
<h3 id="gemfile中-引用-searchkick"><a href="#gemfile中-引用-searchkick" class="headerlink" title="gemfile中  引用  searchkick"></a>gemfile中  引用  searchkick</h3><p>这里我们是使用了 1.3.3 版本的<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'searchkick'</span>, <span class="string">'1.3.3'</span></div></pre></td></tr></table></figure></p>
<h3 id="model-中引用searchkick"><a href="#model-中引用searchkick" class="headerlink" title="model 中引用searchkick"></a>model 中引用searchkick</h3><p>现在我们已经有搜索服务了，现在要配置需要搜索的  model<br>在  model  中引用  searchkick</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全文检索  searchkick</span></div><div class="line">searchkick</div></pre></td></tr></table></figure>
<p>给  products  表重建索引<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Product.reindex</div></pre></td></tr></table></figure></p>
<p>进行搜索<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">products = Product.search <span class="string">"apples"</span></div></pre></td></tr></table></figure></p>
<p>这时就会得到结果集。<br>如果是简单的应用到这里就可以满足要求 ，当然我们有时候需要一些个性化的配置。</p>
<h3 id="给部分字段建立索引"><a href="#给部分字段建立索引" class="headerlink" title="给部分字段建立索引"></a>给部分字段建立索引</h3><p>reindex 方法会默认给所有的字段建立索引，但是由于字段过长，或者性能原因我们只需要部分字段有索引 可以这样：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_data</span></span></div><div class="line">  &#123; <span class="symbol">name:</span> name &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>重写  search_data 方法加入name 这样就只给  name  字段打索引了</p>
<h3 id="关联表建索引"><a href="#关联表建索引" class="headerlink" title="关联表建索引"></a>关联表建索引</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Catalog</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_many <span class="symbol">:products</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:catalog</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_data</span></span></div><div class="line">  &#123; <span class="symbol">name:</span> name &#125;.merge&#123; <span class="symbol">catalog_name:</span> catalog.name &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里 我们给  product  表添加一个索引叫做 分类名称  catalog_name<br>这样搜索分类名称就可以搜索出 同一个分类的 商品列表了</p>
<h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Product.search key</div></pre></td></tr></table></figure>
<p>这个方法会默认搜索 所有的字段 并返回 所有包含  key  的结果集。<br>如果我们想搜索指定的字段该如何设置呢？</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">elasticsearch</span><span class="params">(params = &#123;&#125;, options = &#123;&#125;)</span></span></div><div class="line">  key = params[<span class="symbol">:key</span>].blank? ? <span class="string">"*"</span> : params[<span class="symbol">:key</span>] <span class="comment"># 关键字</span></div><div class="line">  params[<span class="symbol">:page</span>] <span class="params">||</span>= <span class="number">1</span> <span class="comment"># 分页</span></div><div class="line">  params[<span class="symbol">:per_page</span>] <span class="params">||</span>= <span class="number">20</span> <span class="comment"># 每页条数</span></div><div class="line">  where_hash = &#123;</div><div class="line">    <span class="symbol">status:</span> <span class="string">'success'</span>, <span class="comment"># 固定筛选值</span></div><div class="line">  &#125;</div><div class="line">  conditions = &#123;<span class="symbol">where:</span> where_hash&#125;</div><div class="line">  conditions[<span class="symbol">:page</span>] = params[<span class="symbol">:page</span>]</div><div class="line">  conditions[<span class="symbol">:per_page</span>] = params[<span class="symbol">:per_page</span>]</div><div class="line">  search key, conditions</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这样 就相当于给结果集添加  scope，和分页效果，前端配合  kaminari  就可以实现分页效果了<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@articles = Product.elasticsearch(params)</div></pre></td></tr></table></figure></p>
<p>action  中将设定好的参数传入就可以得到结果集了</p>
<p> QWQ~!!</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/08/31/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[shell]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/08/31/shell/</url>
      <content type="html"><![CDATA[<p>vps 设置系统定时重启， ssserver 开机启动</p>
<p>首先先编写开启启动ssserver 脚本<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</div></pre></td></tr></table></figure></p>
<p>P 服务端口<br>K密码m 加密方式 我们选择 比较快速的rc4-md5 放弃了aes-256<br>user 选择 nobody 然后 把这段话保存 为 shadowsocks.sh</p>
<p>将其放在 /opt 目录下</p>
<p>打开开机自启配置文件 <code>vim /etc/rc.local</code></p>
<p>将 <code>/opt/./shadowsocks.sh</code> 这句放在最下方 保存退出<br>执行 <code>source ~/etc/rc.local</code> 让配置生效</p>
<p>crontab -l 查看当前在执行的 定时任务</p>
<p>crontab -e 编辑定时任务</p>
<p>在最下方加 <code>0 13 * * * /sbin/reboot</code></p>
<p>每天的13点重启vps， 因为vps 是美国服务器 有时差 所以13点应该是中国的凌晨 刚刚好</p>
<p>然后 <code>*/5 * * * * ./shadowsocks.sh</code></p>
<p>每5分钟就检测一次 ssserver 如果没有进程 就启动一遍，有就不执行</p>
<p>保存退出</p>
<p>重启vps</p>
<p>登录 vps 输入 top</p>
<p>查看到 ssserver 服务已经启动</p>
<p>说明已经生效了 OK</p>
]]></content>
      
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails-mailer]]></title>
      <url>/Mikasa-Ackerman.github.io/2017/08/31/reila-mailer/</url>
      <content type="html"><![CDATA[<blockquote>
<p>app/mailer 文件夹创建mailer.rb文件</p>
</blockquote>
<a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMailer</span> &lt; ActionMailer::Base</span></div><div class="line">  default <span class="symbol">:from</span> =&gt; <span class="string">"测试邮件 &lt;此处填写发件邮箱&gt;"</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(email, subject)</span></span></div><div class="line">     mail(<span class="symbol">to:</span> email, <span class="symbol">subject:</span> subject)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/intializers 创建setup_mail.rb</p>
</blockquote>
<p>发送邮件服务器的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- encoding : utf-8 -*-</div><div class="line"></div><div class="line">ActionMailer::Base.smtp_settings = &#123;</div><div class="line">    :address              =&gt; Settings.email.address,</div><div class="line">    :port                 =&gt; Settings.email.port,</div><div class="line">    :domain               =&gt; Settings.email.domain,</div><div class="line">    :user_name            =&gt; Settings.email.user_name,</div><div class="line">    :password             =&gt; Settings.email.password,</div><div class="line">    :authentication       =&gt; Settings.email.authentication,</div><div class="line">    :ssl =&gt; true,</div><div class="line">    :enable_starttls_auto =&gt; true</div><div class="line">&#125;</div><div class="line"></div><div class="line">ActionMailer::Base.default_url_options = &#123; host: Setting.host &#125;</div><div class="line"></div><div class="line"># development</div><div class="line"># ActionMailer::Base.default_url_options[:host] = &quot;localhost:3000&quot;</div><div class="line"># ActionMailer::Base.delivery_method = :letter_opener</div></pre></td></tr></table></figure>
<blockquote>
<p>settings.yml 添加配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">email:</div><div class="line">    address: &quot;smtp.qq.com&quot;</div><div class="line">    port: 25</div><div class="line">    domain: &quot;sinopr.org&quot;</div><div class="line">    user_name: &quot;登录名&quot;</div><div class="line">    password: &quot;密码&quot;</div><div class="line">    authentication: &quot;login&quot;</div><div class="line">    host: &apos;路径&apos;</div><div class="line">    mail_from: &apos;xxx@qq.com&apos;</div></pre></td></tr></table></figure>
<p>如果是smtp 服务要保证 邮箱开启了此类服务，部分邮箱开启此类服务后 会给予授权码，如果有授权码，在password 后要填写此授权码 。</p>
<blockquote>
<p>app/user_mailer 下创建 send_email.html.erb, 里面写入想要发送的内容。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[博主简介]]></title>
      <url>/Mikasa-Ackerman.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul>
<li>Email: marinren#qq.com</li>
<li>Github: <a href="https://github.com/Kevinqingyu" target="_blank" rel="external">任清宇的Github仓库</a></li>
</ul>
<h3 id="工作状况"><a href="#工作状况" class="headerlink" title="工作状况"></a>工作状况</h3><ul>
<li>目前就职于<a href="http://www.yiqiyin.com/" target="_blank" rel="external">一起印</a></li>
</ul>
<h3 id="过往项目"><a href="#过往项目" class="headerlink" title="过往项目"></a>过往项目</h3><ul>
<li><a href="http://www.meie.com.cn/" target="_blank" rel="external">神华e购网</a></li>
<li><a href="http://www.govbuy.cn/" target="_blank" rel="external">阳光公采云商城</a></li>
</ul>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><ul>
<li>Ruby</li>
<li>Javascript</li>
<li>Css</li>
<li>Html</li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul>
<li>Rails</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>Mysql</li>
<li>Oracle</li>
<li>Redis</li>
</ul>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>Mac OS</li>
<li>Ubuntu</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>Nginx</li>
<li>Git</li>
<li>Linux</li>
<li>Engine</li>
<li>jQuery</li>
<li>Sidekiq</li>
<li>rabbitmq</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tagcloud]]></title>
      <url>/Mikasa-Ackerman.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>

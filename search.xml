<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[sidekiq 使用]]></title>
      <url>/2020/04/29/sidekiq-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="sidekiq-使用"><a href="#sidekiq-使用" class="headerlink" title="sidekiq 使用"></a>sidekiq 使用</h2><blockquote>
<p>配置好sidekiq和redis后首先新建job</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinishCourseJob</span> &lt; ApplicationJob</span></div><div class="line">  queue_as <span class="symbol">:course</span></div><div class="line"></div><div class="line">  <span class="comment"># 上完课后完成课程</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(id, finished_at)</span></span></div><div class="line">    @@log = Logger.new(<span class="string">'log/delayed_job.log'</span>)</div><div class="line">    course = Course.find_by(<span class="symbol">id:</span> id)</div><div class="line">    @@log.info <span class="string">"当前课程状态：<span class="subst">#&#123;course.status&#125;</span>"</span></div><div class="line">    <span class="keyword">if</span> course.online? &amp;&amp; finished_at == course.finished_at.to_i &amp;&amp; course.may_finish?</div><div class="line">      @@log.info <span class="string">'-------------完成课程---------------'</span></div><div class="line">      course.finish!</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>使用方法</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 立即执行</span></div><div class="line">FinishCourseJob.perform_now(id)</div><div class="line"><span class="comment"># 常规异步执行，有空闲就执行</span></div><div class="line">FinishCourseJob.perform_later(id)</div><div class="line"><span class="comment"># 指定延迟多久执行</span></div><div class="line">FinishCourseJob.set( <span class="symbol">wait:</span> <span class="number">20</span>.minutes ).perform_later</div><div class="line"><span class="comment"># 指定执行时间</span></div><div class="line">FinishCourseJob.set(<span class="symbol">wait_until:</span> start_registration_at).perform_later(id, start_registration_at.to_i)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> sidekiq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（四）]]></title>
      <url>/2019/11/25/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511244769207&amp;di=97fe709abd32e51b037c5bf3d37b8e4b&amp;imgtype=0&amp;src=http%3A%2F%2Ftc.sinaimg.cn%2Fmaxwidth.2048%2Ftc.service.weibo.com%2Fp3_pstatp_com%2Fe59d73299cfdc86f63ef07248bad7bd3.jpg" alt=""><br><a id="more"></a></p>
<h3 id="rails关联查询"><a href="#rails关联查询" class="headerlink" title="rails关联查询"></a>rails关联查询</h3><p>单个关联<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Client.includes(<span class="symbol">:address</span>).limit(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>多个关联<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Article.includes(<span class="symbol">:category</span>, <span class="symbol">:comments</span>)</div></pre></td></tr></table></figure></p>
<p>嵌套关联散列<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Category.includes(<span class="symbol">articles:</span> [&#123; <span class="symbol">comments:</span> <span class="symbol">:guest</span> &#125;, <span class="symbol">:tags</span>])</div></pre></td></tr></table></figure></p>
<p>关联查询 为关联指明条件<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Article.includes(<span class="symbol">:comments</span>).where(<span class="symbol">comments:</span> &#123; <span class="symbol">visible:</span> <span class="literal">true</span> &#125;)</div></pre></td></tr></table></figure></p>
<p>上面的代码会生成使用 LEFT OUTER JOIN 子句的 SQL 语句，而 joins 方法会成生使用 INNER JOIN 子句的 SQL 语句。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">"articles"</span>.<span class="string">"id"</span> <span class="keyword">AS</span> t0_r0, ... <span class="string">"comments"</span>.<span class="string">"updated_at"</span> <span class="keyword">AS</span> t1_r5 <span class="keyword">FROM</span> <span class="string">"articles"</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="string">"comments"</span> <span class="keyword">ON</span> <span class="string">"comments"</span>.<span class="string">"article_id"</span> = <span class="string">"articles"</span>.<span class="string">"id"</span> <span class="keyword">WHERE</span> (comments.visible = <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（三）]]></title>
      <url>/2019/08/29/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511244769207&amp;di=97fe709abd32e51b037c5bf3d37b8e4b&amp;imgtype=0&amp;src=http%3A%2F%2Ftc.sinaimg.cn%2Fmaxwidth.2048%2Ftc.service.weibo.com%2Fp3_pstatp_com%2Fe59d73299cfdc86f63ef07248bad7bd3.jpg" alt=""><br><a id="more"></a></p>
<h3 id="div内滚动"><a href="#div内滚动" class="headerlink" title="div内滚动"></a>div内滚动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">style</span>: &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">overflow</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="淡出"><a href="#淡出" class="headerlink" title="淡出"></a>淡出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="keyword">this</span>).fadeOut(<span class="string">'fast'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).remove();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="pack-和-unpack"><a href="#pack-和-unpack" class="headerlink" title="pack 和 unpack"></a>pack 和 unpack</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; [<span class="string">'hello'</span>].pack(<span class="string">'m'</span>)</div><div class="line">=&gt; <span class="string">"aGVsbG8=\n"</span></div></pre></td></tr></table></figure>
<p>效果等同于：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; Base64.encode64(<span class="string">'hello'</span>)</div><div class="line">=&gt; <span class="string">"aGVsbG8=\n"</span></div></pre></td></tr></table></figure>
<p>好奇为什么命名已经有了base64的转码还要有一个pack方法呢？查了一下阮一峰的讲解<br>这里直接引用：</p>
<p>大概原因就是Base64将三个字节转化成四个字节</p>
<table>
<thead>
<tr>
<th>Text</th>
<th>content</th>
<th>M</th>
<th>a</th>
<th>n</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII</td>
<td>77</td>
<td>97</td>
<td>110</td>
<td></td>
</tr>
<tr>
<td>Bitpattern</td>
<td>010011</td>
<td>010110</td>
<td>000101</td>
<td>101110</td>
</tr>
<tr>
<td>Index</td>
<td>19</td>
<td>22</td>
<td>5</td>
<td>46</td>
</tr>
<tr>
<td>Base64-Encoded</td>
<td>T</td>
<td>W</td>
<td>F</td>
<td>u</td>
</tr>
</tbody>
</table>
<blockquote>
<p>第一步，”M”、”a”、”n”的ASCII值分别是77、97、110，对应的二进制值是01001101、01100001、01101110，将它们连成一个24位的二进制字符串010011010110000101101110。</p>
<p>第二步，将这个24位的二进制字符串分成4组，每组6个二进制位：010011、010110、000101、101110。</p>
<p>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节：00010011、00010110、00000101、00101110。它们的十进制值分别是19、22、5、46。</p>
<p>第四步，根据上表，得到每个值对应Base64编码，即T、W、F、u。</p>
<p>因此，Man的Base64编码就是TWFu。</p>
<p>如果字节数不足三，则这样处理：</p>
</blockquote>
<ol>
<li><p>二个字节的情况：将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p>
</li>
<li><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>
</li>
</ol>
<blockquote>
<p>再举一个中文的例子，汉字”严”如何转化成Base64编码？</p>
<p>这里需要注意，汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p>
<p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p>
<p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p>
</blockquote>
<p>看完之后虽然对base64已经有所了解但是还是对pack这个方法抱有疑惑，继续查找<br>往上资料显示原文：</p>
<blockquote>
<p>Per OP’s clarified question, “Why do we use #pack to get base64 and #unpack to get other representations of raw data?”</p>
<p>The surface level reason is because Array#pack is a method that returns a String, while String#unpack is a method that returns an Array.</p>
<p>There are stronger conceptual reasons underlying this. The key principle is that base64 is not an array of raw bytes. Rather, it’s a 7-bit-ASCII-safe string that can represent arbitrary bytes if properly (de)coded.</p>
<p>Each base64 character maps to a sequence of six bits. At the byte level, that’s a 4:3 ratio of characters to raw bytes. Since integer powers of 2 don’t divide by 3, we end up with padding more often than not, and you can’t slice base64 in arbitrary places to get ranges of bytes out of it (you’d have to figure out which bytes you want in groups of three and go get the associated base64 characters in groups of four).</p>
<p>Arbitrary sequences of data are, fundamentally, arrays of bytes. Base64-encoded sequences are, fundamentally, strings: data sequences constrained to the range of bytes safely transmissible and displayable as text.</p>
<p>Base64 is the encapsulation (or “packing”) of a data array into a string</p>
</blockquote>
<p>根据OP澄清的问题，“为什么我们要使用pack来获取base64和unpack来获取原始数据的其他表示？”</p>
<p>表面层原因是因为 <code>Array#pack</code> 是返回字符串的方法，而<code>String#unpack</code>是返回数组的方法。</p>
<p>这背后有更强有力的概念原因。关键原因是base64不是原始字节数组。相反，它是一个7位的ASCII安全字符串，如果编码正确，它可以表示任意字节。</p>
<p>每个base64字符映射到一个六位序列。在字节级别，这是字符与原始字节的4:3比例。由于2的整数幂不能被3整除，所以我们最终得到字节长度比原字节长度更长，而且你不能在任意位置对base64进行切割，以从中获取字节范围（你必须找出三个字节组中需要哪些字节，然后四个字节组中获取相关的base64字符）。</p>
<p>从根本上讲，任意数据序列是字节数组。基本上，base64编码序列是字符串：数据序列被限制在字节范围内，可以安全地作为文本传输和显示。</p>
<p>base64是将数据数组封装（或“打包”）为字符串</p>
<h4 id="这么看来-pack-和-unpack现在看来就更加形象了"><a href="#这么看来-pack-和-unpack现在看来就更加形象了" class="headerlink" title="这么看来 pack 和 unpack现在看来就更加形象了"></a>这么看来 pack 和 unpack现在看来就更加形象了</h4><p>这次遇到一个小问题就是对接方是java代码生成的base64 字符串末尾是的不带<code>\n</code>的<br>然后我使用了 <code>String#chomp</code>方法去掉了末尾的换行符<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; Base64.encode64(<span class="string">'hello'</span>).chomp</div><div class="line">=&gt; <span class="string">"aGVsbG8="</span></div></pre></td></tr></table></figure></p>
<p>但是这里还有点小疑惑，为什么ruby不和java一样反而自己要加换行符呢，原来是因为ruby 的Base64.encode64方法遵循了<code>RFC 4648</code>规范，该方法会将encoded的字符串每60个字符换行（”\n”），所以后续ruby推出了 <code>Base64#strict_encode64</code> 和 <code>Base64#strict_encode64</code>方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; Base64.strict_encode64(<span class="string">'hello'</span>)</div><div class="line">=&gt; <span class="string">"aGVsbG8="</span></div><div class="line">pry(main)&gt; Base64.strict_decode64(<span class="string">"aGVsbG8="</span>)</div><div class="line">=&gt; <span class="string">"hello"</span></div></pre></td></tr></table></figure>
<p>那么问题来了 <code>Base64#strict_encode64</code> 是你怎么实现的呢？</p>
<p>查看源码，原来就是这么简单的且枯燥</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># File activesupport/lib/active_support/base64.rb, line 29</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Base64</span>.<span class="title">strict_encode64</span><span class="params">(value)</span></span></div><div class="line">  encode64(value).gsub(<span class="regexp">/\n/</span>, <span class="string">''</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="and-和-amp-amp-的区别"><a href="#and-和-amp-amp-的区别" class="headerlink" title="and 和 &amp;&amp; 的区别"></a>and 和 &amp;&amp; 的区别</h3><p>虽然二者都是<code>与门</code>但是明显 在ruby中 &amp;&amp; 的优先级更高</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">pry(main)&gt;</span><span class="bash"> <span class="literal">true</span> and <span class="literal">true</span> ? <span class="string">'hello'</span> : <span class="string">'hi'</span></span></div><div class="line">=&gt; "hello"</div><div class="line"></div><div class="line"><span class="meta">pry(main)&gt;</span><span class="bash"> <span class="literal">true</span> &amp;&amp; <span class="literal">true</span> ? <span class="string">'hello'</span> : <span class="string">'hi'</span></span></div><div class="line">=&gt; "hello"</div><div class="line"></div><div class="line"><span class="meta">pry(main)&gt;</span><span class="bash"> <span class="literal">false</span> and <span class="literal">true</span> ? <span class="string">'hello'</span> : <span class="string">'hi'</span></span></div><div class="line">=&gt; false</div><div class="line"></div><div class="line"><span class="meta">pry(main)&gt;</span><span class="bash"> <span class="literal">false</span> &amp;&amp; <span class="literal">true</span> ? <span class="string">'hello'</span> : <span class="string">'hi'</span></span></div><div class="line">=&gt; "hi"</div></pre></td></tr></table></figure>
<h3 id="form-for-和-form-tag-区别"><a href="#form-for-和-form-tag-区别" class="headerlink" title="form_for 和 form_tag 区别"></a>form_for 和 form_tag 区别</h3><p>生成的html不同<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">form_for @object <span class="keyword">do</span> <span class="params">|f|</span></div><div class="line">  f.text_field <span class="symbol">:name</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">生成 input id=<span class="string">"object_name"</span> name=<span class="string">"object[name]"</span></div><div class="line"></div><div class="line">form_tag @object <span class="keyword">do</span></div><div class="line">  text_field_tag <span class="symbol">:name</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">生成 input id=<span class="string">"name"</span> name=<span class="string">"name"</span></div></pre></td></tr></table></figure></p>
<p>还有就是form_for 算是 对象处理+url+form_tag的一个封装</p>
<p>通过源码也可以看出form_for 在判断了url 和 对象之后还是调用的form_tag</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">form_for</span><span class="params">(record, options = &#123;&#125;, &amp;block)</span></span></div><div class="line">  raise ArgumentError, <span class="string">"Missing block"</span> <span class="keyword">unless</span> block_given?</div><div class="line"></div><div class="line">  options[<span class="symbol">:html</span>] <span class="params">||</span>= &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">case</span> record</div><div class="line">  <span class="keyword">when</span> String, Symbol</div><div class="line">    object_name = record</div><div class="line">    object      = <span class="literal">nil</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    object      = record.is_a?(Array) ? record.last : record</div><div class="line">    object_name = options[<span class="symbol">:as</span>] <span class="params">||</span> ActiveModel::Naming.param_key(object)</div><div class="line">    apply_form_for_options!(record, options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  options[<span class="symbol">:html</span>][<span class="symbol">:remote</span>] = options.delete(<span class="symbol">:remote</span>) <span class="keyword">if</span> options.has_key?(<span class="symbol">:remote</span>)</div><div class="line">  options[<span class="symbol">:html</span>][<span class="symbol">:method</span>] = options.delete(<span class="symbol">:method</span>) <span class="keyword">if</span> options.has_key?(<span class="symbol">:method</span>)</div><div class="line">  options[<span class="symbol">:html</span>][<span class="symbol">:authenticity_token</span>] = options.delete(<span class="symbol">:authenticity_token</span>)</div><div class="line"></div><div class="line">  builder = options[<span class="symbol">:parent_builder</span>] = instantiate_builder(object_name, object, options, &amp;block)</div><div class="line">  output  = capture(builder, &amp;block)</div><div class="line">  default_options = builder.multipart? ? &#123; <span class="symbol">:multipart</span> =&gt; <span class="literal">true</span> &#125; : &#123;&#125;</div><div class="line">  form_tag(options.delete(<span class="symbol">:url</span>) <span class="params">||</span> &#123;&#125;, default_options.merge!(options.delete(<span class="symbol">:html</span>))) &#123; output &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac下使用虚拟机开发]]></title>
      <url>/2019/06/24/mac%E4%B8%8B%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1543/2019/d2b5ca33bd970f64a6301fa75ae2eb22.png" alt=""></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在过去的几年间一直使用MacBookPro(2015款13寸最低配，2013款15寸最高配)笔记本开发，使用了大概4年多的时间，非常的熟悉mac下开发。由于性能问题在换到黑苹果之后装载了最新的操作系统，电脑上可能会装有十几个ruby项目以及一部分的vue项目等等，在mac最新系统(10.14.4)下对老版本的ruby和gems的支持有些许问题给我带来了很大困扰，不同的环境交错复杂时间长了很难维护，遂产生了使用虚拟机或者docker开发 的想法。<br><a id="more"></a></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>这篇记录不讨论mac 虚拟机 和docker开发 客观的优缺点，而是带着主观来说优缺点可能某些优点在我使用就不是优点了(或者说不适合我)，所以我希望能达到<code>和mac下开发的体验保持一致</code>，<code>速度快隔离性好</code>，之前考虑过docker由于docker偏向于一个项目一个docker镜像这对我来说是不可接受的，因为我项目很多镜像搞太多还单独独立于自己的容器中对我来说不方便，最后经由<code>同事</code>推荐使用Vagrant + VirtualBox(因为免费) + ubuntu18.04镜像。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>Vagrant 支持 VirtualBox、HyperV、VMWare 等虚拟机软件，<br>我安装的是 VirtualBox(因为其他的要么新系统装不上要么收费比如VMWare)</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载VirtualBox 安装这个比较简单就和装普通的软件一样，下载安装包安装也无需配置甚至都不用打开。</p>
<p>然后安装Vagrant</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install vagrant</div></pre></td></tr></table></figure>
<p>安装好之后我们来安装ubuntu18.04 的服务器版本(体积小)<br><a href="http://www.vagrantbox.es/" target="_blank" rel="external">更多系统镜像点击这里</a><br>这个地址的镜像都比较老旧了所以这次我去官网查到了最新的镜像<br><a href="https://app.vagrantup.com/generic/boxes/ubuntu1804" target="_blank" rel="external">ubuntu18.04LTS</a></p>
<p>为了方便管理虚拟机的开发环境 共享文件夹还有配置文件等等，我这里在mac 的home目录下新建了一个共享文件夹就叫<code>vagrant</code> home目录下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir vagrant</div></pre></td></tr></table></figure></p>
<p>创建好之后<code>cd</code>进到目录中创建虚拟机配置文件 <code>Vagrantfile</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> vagrant</div><div class="line">vim Vagrantfile</div></pre></td></tr></table></figure>
<p>填入如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(2) do |config|</div><div class="line">  # 选择系统镜像</div><div class="line">  config.vm.box = &quot;generic/ubuntu1804&quot;</div><div class="line">  config.vm.box_check_update = false</div><div class="line">  # 时区设置</div><div class="line">  if Vagrant.has_plugin?(&quot;vagrant-timezone&quot;)</div><div class="line">    config.timezone.value = &quot;Asia/Shanghai&quot;</div><div class="line">  end</div><div class="line">  # 固定IP 的私有网络 外部不可访问</div><div class="line">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.50.4&quot;</div><div class="line">  # 这是对于虚拟机共享文件夹的配置</div><div class="line">  config.vm.synced_folder &quot;.&quot;, &quot;/vagrant&quot;, type: &quot;nfs&quot;, disabled: true</div><div class="line">  config.vm.synced_folder &quot;~/vagrant&quot;, &quot;/vagrant&quot;, type: &quot;nfs&quot;, mount_options: [&quot;nolock&quot;, &quot;vers=3&quot;, &quot;udp&quot;, &quot;noatime&quot;, &quot;actimeo=1&quot;]</div><div class="line"></div><div class="line">  # 虚拟机配置 内存 cpu 等</div><div class="line">  config.vm.provider &quot;virtualbox&quot; do |vb|</div><div class="line">    vb.memory = 2048</div><div class="line">    vb.cpus = 2</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>保存退出</p>
<p>这些配置都配置好之后就可以在vagrant文件夹下使用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant up</div></pre></td></tr></table></figure>
<p>来启动虚拟机并会自动从网上下载ubuntu18.04的镜像<br>这个过程我们需要等待。</p>
<p>启动好了之后可以通过ssh登录到虚拟机并且 可以额设置通过ssh key登录 就和一台普通的服务器是一样的</p>
<p>也可以在mac写入alias</p>
<p>在 <code>~/.zshrc</code>(如果是bash请加入 ~/.bashrc) 中加入<br><code>alias va=&#39;ssh vagrant@ubuntu.com&#39;</code><br>这样以后就可以快速的使用 <code>va</code> 命令进入虚拟机, 当你在虚拟机启动了某项目 让你访问 <code>0.0.0.0:3000</code>端口时 你可以通过之前的配置访问 <code>192.168.50.4:3000</code>来访问也可以通过修改<br><code>/etc/hosts</code></p>
<p>加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.50.4    ubuntu.com</div></pre></td></tr></table></figure>
<p>这样你就可以在mac浏览器使用 <code>ubuntu.com:3000</code> 来访问虚拟机的 <code>0.0.0.0:3000</code>地址</p>
<h3 id="虚拟机内部配置"><a href="#虚拟机内部配置" class="headerlink" title="虚拟机内部配置"></a>虚拟机内部配置</h3><p>我在mac上习惯了使用zsh + oh-my-zsh来工作，那么在ubuntu这里也是一样可以使用的甚至当在虚拟机中使用了同样的样式之后你都分辨不出你是在虚拟机中或是在mac中，所以还是建议使用不同的主题或者带有目录前缀的这种主题，这样一看主题你就知道你在什么位置了。</p>
<p>在ubuntu中也是可以访问mac 的比如 现在mac 的网段就是<code>192.168.50.1</code> 也可以用同样的手法修改 ubuntu 的<br><code>etc/hosts</code> 将mac改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.50.4  mac.com</div></pre></td></tr></table></figure></p>
<p>这样在ubuntu下跑的服务数据库连接可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">database:</div><div class="line">  name: root</div><div class="line">  password:</div><div class="line">  host: mac.com</div><div class="line">  port: 3306</div></pre></td></tr></table></figure></p>
<p>这样的配置来连接mac下的数据库(前提是mac下的数据库先开启允许远端访问哦)</p>
<p>然后剩下的就是在虚拟机这里搭建你所需要的开发环境，将代码文件夹放置于共享文件夹中，mac上使用你喜欢的编辑器编辑共享文件夹内的代码，而虚拟机负责运行起代码，mac来提交代码。</p>
<h3 id="备份镜像"><a href="#备份镜像" class="headerlink" title="备份镜像"></a>备份镜像</h3><p>在你将开发环境和配置都搭建好之后可以将自己搭建好的环境作为一个镜像输出出来，以后自己新建另一个虚拟机或是分配给新来的开发伙伴直接使用免于重新搭建都是可以的。<br>使用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant package --output boxname.box</div></pre></td></tr></table></figure>
<p>就可以将现在运行的环境打包为一个镜像</p>
<p>如果下次想要使用可以使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant add box box 名字 box地址</div></pre></td></tr></table></figure>
<p>虚拟机这里基本就是这些内容了，但是如果使用ruby on rails开发web项目那么还有几点稍微补充一下，我这里使用rvm + ruby 开发，其他都是比较正常的按照ruby-china 的教程你就可以搭建出开发环境这里掠过，要说的一点事首先rails console 的中文问题</p>
<p>需要使用一条命令解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export LC_CTYPE=en_US.UTF-8</div></pre></td></tr></table></figure>
<p>然后是rails开发在修改了controller代码时 rails(spring)无法获取到代码的修改事件从而导致你需要重启项目才能重新加载变更内容(view部分不受影响)</p>
<p>rails4 项目可以采用安装插件的方式解决<br>在vagrant共享文件夹下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vagrant plugin install vagrant-vbguest</div><div class="line">vagrant plugin install vagrant-librarian-chef-nochef</div></pre></td></tr></table></figure>
<p>安装好插件之后 执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant reload</div></pre></td></tr></table></figure>
<p>重启虚拟机</p>
<p>但是这个方法亲测在rails 5.2中是无效的 不知道rails5其他版本是否也是无效，由于这个原因导致要么使用vim编程要么就开发的时候修改了控制器就要重启项目，如果真的是这样就已经和mac下体验差距过大了，还好现在vscode编辑器支持 remote-ssh编程，也就是说在mac下使用vscode编辑器并安装remote-ssh插件之后可以远程虚拟机中编辑代码，实测在连接项目后延迟几乎感觉不到(可能是由于就在本地的缘故)，几乎和本地开发体验一致，并且也保证了虚拟机的独立性从此算是虚拟机开发圆满成功。</p>
<p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1545/2019/d2b5ca33bd970f64a6301fa75ae2eb22.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在mac下虚拟机开发根据自己的喜好添加，甚至如果自己的配置够高可以 尝试搭建多个虚拟机来模拟集群，由于各自独立的环境也可以模拟多台服务器场景。还有更多玩法等待你去挖掘。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby rails 虚拟机 vagrant </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails应用模板]]></title>
      <url>/2019/06/24/rails%E5%BA%94%E7%94%A8%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>应用模板是包含 DSL 的 Ruby 文件，作用是为新建的或现有的 Rails 项目添加 gem 和初始化脚本等。<br><a href="https://ruby-china.github.io/rails-guides/rails_application_templates.html" target="_blank" rel="external">模板指南连接</a></p>
<a id="more"></a>
<h3 id="以下为api模板实例"><a href="#以下为api模板实例" class="headerlink" title="以下为api模板实例"></a>以下为api模板实例</h3><blockquote>
<p>api-service-template(接口服务模板)<br>模板将会生成的文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Gemfile</div><div class="line">002-master_key.rb</div><div class="line">bigint_json.rb</div><div class="line">assets.rb</div><div class="line">/grape</div><div class="line">zh-CN.yml</div><div class="line">uid_service.rb</div><div class="line">app_config.rb</div><div class="line">.ruby-version</div><div class="line">.ruby-gemset</div><div class="line">README.md</div></pre></td></tr></table></figure>
<h3 id="执行方法："><a href="#执行方法：" class="headerlink" title="执行方法："></a>执行方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rails new blog -m ~/template.rb</div><div class="line">$ rails new blog -m http://example.com/template.rb</div></pre></td></tr></table></figure>
<h3 id="template-rb-中的内容"><a href="#template-rb-中的内容" class="headerlink" title="template.rb 中的内容"></a>template.rb 中的内容</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Gemfile</span></div><div class="line">file <span class="string">'Gemfile'</span>, &lt;&lt;~CODE</div><div class="line">  source <span class="string">'https://gems.ruby-china.com'</span></div><div class="line">  ruby <span class="string">'2.5.0'</span></div><div class="line">  <span class="comment"># Bundle edge Rails instead: gem 'rails', github: 'rails/rails'</span></div><div class="line">  gem <span class="string">'rails'</span>, <span class="string">'~&gt; 5.2.0'</span></div><div class="line">  <span class="comment"># Use mysql as the database for Active Record</span></div><div class="line">  gem <span class="string">'mysql2'</span>, <span class="string">'&gt;= 0.4.4'</span>, <span class="string">'&lt; 0.6.0'</span></div><div class="line">  <span class="comment"># Use Puma as the app server</span></div><div class="line">  gem <span class="string">'puma'</span>, <span class="string">'~&gt; 3.11'</span></div><div class="line">  <span class="comment"># Use SCSS for stylesheets</span></div><div class="line">  gem <span class="string">'sass-rails'</span>, <span class="string">'~&gt; 5.0'</span></div><div class="line">  <span class="comment"># Use Uglifier as compressor for JavaScript assets</span></div><div class="line">  gem <span class="string">'uglifier'</span>, <span class="string">'&gt;= 1.3.0'</span></div><div class="line">  <span class="comment"># See https://github.com/rails/execjs#readme for more supported runtimes</span></div><div class="line">  <span class="comment"># gem 'mini_racer', platforms: :ruby</span></div><div class="line">  <span class="comment"># Use CoffeeScript for .coffee assets and views</span></div><div class="line">  gem <span class="string">'coffee-rails'</span>, <span class="string">'~&gt; 4.2'</span></div><div class="line">  <span class="comment"># Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks</span></div><div class="line">  gem <span class="string">'turbolinks'</span>, <span class="string">'~&gt; 5'</span></div><div class="line">  <span class="comment"># Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder</span></div><div class="line">  gem <span class="string">'jbuilder'</span>, <span class="string">'~&gt; 2.5'</span></div><div class="line">  <span class="comment"># Use Redis adapter to run Action Cable in production</span></div><div class="line">  gem <span class="string">'kaminari'</span>, <span class="string">'~&gt; 0.16.3'</span></div><div class="line">  gem <span class="string">"snowflake-rb"</span>, <span class="string">'~&gt;0.0.2'</span></div><div class="line">  gem <span class="string">'rack-cors'</span>, <span class="symbol">:require</span> =&gt; <span class="string">'rack/cors'</span></div><div class="line">  gem <span class="string">'config'</span>, <span class="string">'~&gt; 1.7.0'</span></div><div class="line">CODE</div><div class="line"><span class="comment"># 创建grape文件</span></div><div class="line"><span class="keyword">if</span> yes?(<span class="string">"是否想要安装gem grape并创建grape API 默认文件?"</span>)</div><div class="line">  gem <span class="string">'grape'</span>, <span class="string">'~&gt; 1.0.2'</span></div><div class="line">  gem <span class="string">'grape-entity'</span>, <span class="string">'~&gt; 0.7.1'</span></div><div class="line">  gem <span class="string">'grape-swagger'</span>, <span class="string">'~&gt; 0.28.0'</span></div><div class="line">  gem <span class="string">'grape-swagger-entity'</span>, <span class="string">'~&gt; 0.2.3'</span></div><div class="line">  gem <span class="string">'grape-swagger-representable'</span>, <span class="string">'~&gt; 0.1.5'</span></div><div class="line">  gem <span class="string">'grape-swagger-ui'</span>, <span class="string">'~&gt; 2.2.8'</span></div><div class="line">  gem <span class="string">'grape_logging'</span>, <span class="string">'~&gt; 1.7.0'</span></div><div class="line"></div><div class="line">  <span class="comment"># routes</span></div><div class="line">  route <span class="string">"mount API::Base =&gt; '/'"</span></div><div class="line"></div><div class="line">  initializer <span class="string">"assets.rb"</span> <span class="keyword">do</span></div><div class="line">    &lt;&lt;~CODE</div><div class="line">      Rails.application.config.assets.version = <span class="string">'1.0'</span></div><div class="line">      Rails.application.config.assets.paths &lt;&lt; Rails.root.join(<span class="string">'node_modules'</span>)</div><div class="line">      Rails.application.config.assets.precompile += <span class="string">%w( swagger_ui.js swagger_ui_screen.css swagger_ui_print.css )</span></div><div class="line">    CODE</div><div class="line">  <span class="keyword">end</span></div><div class="line">  file <span class="string">'app/grape/api/error.rb'</span>, &lt;&lt;~CODE</div><div class="line">    <span class="class"><span class="keyword">module</span> <span class="title">API</span></span></div><div class="line">      <span class="class"><span class="keyword">class</span> <span class="title">Error</span> &lt; Grape::Entity</span></div><div class="line">        expose <span class="symbol">:code</span></div><div class="line">        expose <span class="symbol">:message</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  CODE</div><div class="line">  file <span class="string">'app/grape/api/api_error_handler.rb'</span>, &lt;&lt;~CODE</div><div class="line">    <span class="comment"># trap all exceptions and fail gracefuly with a 500 and a proper message</span></div><div class="line">    <span class="class"><span class="keyword">module</span> <span class="title">API</span></span></div><div class="line">      <span class="class"><span class="keyword">class</span> <span class="title">ApiErrorHandler</span> &lt; Grape::Middleware::<span class="title">Base</span></span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call!</span><span class="params">(env)</span></span></div><div class="line">          @env = env</div><div class="line">          <span class="keyword">begin</span></div><div class="line">            @app.call(@env)</div><div class="line">          <span class="keyword">rescue</span> Exception =&gt; e</div><div class="line">            throw <span class="symbol">:error</span>, <span class="symbol">:message</span> =&gt; e.message <span class="params">||</span> options[<span class="symbol">:default_message</span>], <span class="symbol">:status</span> =&gt; <span class="number">500</span></div><div class="line">          <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  CODE</div><div class="line">  file <span class="string">'app/grape/api/base.rb'</span>, &lt;&lt;~CODE</div><div class="line">    <span class="class"><span class="keyword">module</span> <span class="title">API</span></span></div><div class="line">      <span class="class"><span class="keyword">class</span> <span class="title">Base</span> &lt; Grape::API</span></div><div class="line">        use GrapeLogging::Middleware::RequestLogger, <span class="symbol">logger:</span> logger, <span class="symbol">log_level:</span> <span class="string">'debug'</span><span class="comment">#, formatter: MyFormatter.new</span></div><div class="line">        version <span class="string">'v1'</span>, <span class="symbol">using:</span> <span class="symbol">:path</span>, <span class="symbol">vendor:</span> <span class="string">'InvoiceService'</span></div><div class="line">        prefix <span class="symbol">:api</span></div><div class="line">        format <span class="symbol">:json</span></div><div class="line">        rescue_from ActiveRecord::RecordNotFound <span class="keyword">do</span>  <span class="params">|e|</span></div><div class="line">          server_error!(<span class="number">404</span>, <span class="string">'数据未找到'</span>)</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="comment"># rescue最低优先级</span></div><div class="line">        rescue_from <span class="symbol">:all</span> <span class="keyword">do</span> <span class="params">|e|</span></div><div class="line">          puts e.message</div><div class="line">          puts e.backtrace</div><div class="line">          server_error!(<span class="number">500</span>, e.message)</div><div class="line">        <span class="keyword">end</span></div><div class="line">        formatter <span class="symbol">:json</span>, lambda &#123; <span class="params">|object, env|</span></div><div class="line">          <span class="keyword">if</span> object.<span class="keyword">class</span> == Hash &amp;&amp; object[<span class="symbol">:swagger</span>] <span class="comment"># 适配swagger输出</span></div><div class="line">            data = object.to_json</div><div class="line">          <span class="keyword">else</span></div><div class="line">            data = &#123; <span class="symbol">code:</span> <span class="number">0</span>, <span class="symbol">msg:</span> <span class="string">"success"</span>, <span class="symbol">:data</span> =&gt; object &#125;.to_json</div><div class="line">          <span class="keyword">end</span></div><div class="line">        &#125;</div><div class="line">        error_formatter <span class="symbol">:json</span>, lambda &#123; <span class="params">|message, backtrace, options, env, original_exception|</span></div><div class="line">            &#123; <span class="symbol">code:</span> <span class="number">500</span>, <span class="symbol">msg:</span> options &#125;.to_json</div><div class="line">        &#125;</div><div class="line">        helpers <span class="keyword">do</span></div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">current_user</span></span></div><div class="line">            @current_user <span class="params">||</span>= User.authorize!(env)</div><div class="line">          <span class="keyword">end</span></div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">authenticate!</span></span></div><div class="line">            error!(<span class="string">'401 Unauthorized'</span>, <span class="number">401</span>) <span class="keyword">unless</span> current_user</div><div class="line">          <span class="keyword">end</span></div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">server_error!</span><span class="params">(code = <span class="number">500</span>, message = <span class="string">'Server error.'</span>)</span></span></div><div class="line">          <span class="comment"># failure [[code, message, API::Error]]</span></div><div class="line">            error!(message, code)</div><div class="line">          <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="comment"># 配置完全局helper再mount api，否则helper不在api中生效</span></div><div class="line">        <span class="comment"># use API::ApiErrorHandler</span></div><div class="line">        <span class="comment"># 例如：mount API::Finance::Invoice</span></div><div class="line">        add_swagger_documentation <span class="symbol">base_path:</span> <span class="string">'/'</span>,</div><div class="line">                                  <span class="symbol">title:</span> <span class="string">"xxAPI"</span>,</div><div class="line">                                  <span class="symbol">doc_version:</span> <span class="string">'0.0.1'</span>,</div><div class="line">                                  <span class="symbol">hide_documentation_path:</span> <span class="literal">true</span>,</div><div class="line">                                  <span class="symbol">hide_format:</span> <span class="literal">true</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  CODE</div><div class="line"><span class="keyword">end</span></div><div class="line">gem_group <span class="symbol">:development</span>, <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># Call 'byebug' anywhere in the code to stop execution and get a debugger console</span></div><div class="line">  gem <span class="string">'byebug'</span>, <span class="symbol">platforms:</span> [<span class="symbol">:mri</span>, <span class="symbol">:mingw</span>, <span class="symbol">:x64_mingw</span>]</div><div class="line">  gem <span class="string">'pry-rails'</span>, <span class="string">'0.3.2'</span></div><div class="line">  gem <span class="string">'pry-byebug'</span></div><div class="line">  gem <span class="string">'capistrano-rails'</span></div><div class="line">  gem <span class="string">'capistrano-rvm'</span>, <span class="string">'~&gt; 0.1.2'</span></div><div class="line">  gem <span class="string">'capistrano3-puma'</span>, <span class="string">'~&gt; 1.2.1'</span></div><div class="line"><span class="keyword">end</span></div><div class="line">gem_group <span class="symbol">:development</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># Access an interactive console on exception pages or by calling 'console' anywhere in the code.</span></div><div class="line">  gem <span class="string">'web-console'</span>, <span class="string">'&gt;= 3.3.0'</span></div><div class="line">  gem <span class="string">'listen'</span>, <span class="string">'&gt;= 3.0.5'</span>, <span class="string">'&lt; 3.2'</span></div><div class="line">  <span class="comment"># Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring</span></div><div class="line">  gem <span class="string">'spring'</span></div><div class="line">  gem <span class="string">'spring-watcher-listen'</span>, <span class="string">'~&gt; 2.0.0'</span></div><div class="line"><span class="keyword">end</span></div><div class="line">gem_group <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  <span class="comment"># Adds support for Capybara system testing and selenium driver</span></div><div class="line">  gem <span class="string">'capybara'</span>, <span class="string">'&gt;= 2.15'</span>, <span class="string">'&lt; 4.0'</span></div><div class="line">  gem <span class="string">'selenium-webdriver'</span></div><div class="line">  <span class="comment"># Easy installation and use of chromedriver to run system tests with Chrome</span></div><div class="line">  gem <span class="string">'chromedriver-helper'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">if</span> yes?(<span class="string">"是否锁定ruby版本为2.5.0?"</span>)</div><div class="line">  file <span class="string">'.ruby-version'</span>, <span class="string">"ruby-2.5.0"</span></div><div class="line"><span class="keyword">end</span></div><div class="line">file <span class="string">'.ruby-gemset'</span>, <span class="string">"<span class="subst">#&#123;<span class="keyword">self</span>.app_path&#125;</span>"</span></div><div class="line"><span class="comment"># 初始化文件</span></div><div class="line">file <span class="string">'app/services/uid_service.rb'</span>, &lt;&lt;~CODE</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">UidService</span></span></div><div class="line">    <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></div><div class="line">      <span class="keyword">attr_accessor</span> <span class="symbol">:worker_id</span>, <span class="symbol">:snowflake</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">next_id</span></span></div><div class="line">        @snowflake <span class="params">||</span>= Snowflake::Rb.snowflake(@worker_id<span class="params">||</span>get_worker_id, region_id)</div><div class="line">        @snowflake.next_id</div><div class="line">      <span class="keyword">end</span></div><div class="line">      private</div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">get_worker_id</span></span></div><div class="line">        hostname = Socket.gethostname</div><div class="line">        id = (Socket.gethostname[<span class="number">0</span>].ord*<span class="number">100</span> + Socket.gethostname[<span class="number">1</span>].ord)%<span class="number">512</span></div><div class="line">        @worker_id = id</div><div class="line">      <span class="keyword">end</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">region_id</span></span></div><div class="line">        <span class="number">1</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">CODE</div><div class="line">file <span class="string">'config/initializers/002-master_key.rb'</span>, &lt;&lt;~CODE</div><div class="line">  ENV[<span class="string">'RAILS_MASTER_KEY'</span>] = ENV[<span class="string">'payment_service_STAG_RAILS_MASTER_KEY'</span>]</div><div class="line">CODE</div><div class="line">file <span class="string">'config/initializers/bigint_json.rb'</span>, &lt;&lt;~CODE</div><div class="line">  <span class="comment"># json输出bigint时转为字符串</span></div><div class="line">  <span class="comment"># 否则grape输出时以int导致数值错误</span></div><div class="line">  <span class="comment"># 且某些json解析也需要适配bigint</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Integer</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_json</span><span class="params">(options = <span class="literal">nil</span>)</span></span></div><div class="line">      <span class="keyword">self</span> &gt; <span class="number">2147483647</span> ? <span class="keyword">self</span>.to_s : <span class="keyword">self</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">CODE</div><div class="line">file <span class="string">'config/initializers/app_config.rb'</span>, &lt;&lt;~CODE</div><div class="line">  Rails.application.config.assets.version = <span class="string">'1.0'</span></div><div class="line">  Rails.application.config.time_zone = <span class="string">'Beijing'</span></div><div class="line">  <span class="comment"># # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.</span></div><div class="line">  <span class="comment"># # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.&#123;rb,yml&#125;').to_s]</span></div><div class="line">  Rails.application.config.i18n.default_locale = <span class="string">'zh-CN'</span></div><div class="line">  <span class="comment"># # Do not swallow errors in after_commit/after_rollback callbacks.</span></div><div class="line">  <span class="comment"># Rails.application.config.active_record.raise_in_transactional_callbacks = true</span></div><div class="line">  <span class="comment"># Cors支持， 兼容Grape</span></div><div class="line">  Rails.application.config.middleware.use Rack::Cors <span class="keyword">do</span></div><div class="line">    allow <span class="keyword">do</span></div><div class="line">      origins <span class="string">"*"</span></div><div class="line">      resource <span class="string">"*"</span>, <span class="symbol">headers:</span> <span class="symbol">:any</span>, <span class="symbol">methods:</span> [<span class="symbol">:get</span>, <span class="symbol">:post</span>, <span class="symbol">:put</span>, <span class="symbol">:delete</span>, <span class="symbol">:options</span>]</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">CODE</div><div class="line"><span class="comment"># 添加国际化文件</span></div><div class="line">file <span class="string">'config/locales/zh-CN.yml'</span>, &lt;&lt;~YAML</div><div class="line">  zh-<span class="symbol">CN:</span></div><div class="line">    <span class="symbol">grape:</span></div><div class="line">      <span class="symbol">errors:</span></div><div class="line">        <span class="symbol">format:</span> ! <span class="string">'%&#123;attributes&#125; %&#123;message&#125;'</span></div><div class="line">        <span class="symbol">messages:</span></div><div class="line">          <span class="symbol">coerce:</span> <span class="string">'无效'</span></div><div class="line">          <span class="symbol">presence:</span> <span class="string">'缺失'</span></div><div class="line">          <span class="symbol">regexp:</span> <span class="string">'无效'</span></div><div class="line">          <span class="symbol">blank:</span> <span class="string">'为空'</span></div><div class="line">          <span class="symbol">values:</span> <span class="string">'无效值'</span></div><div class="line">          <span class="symbol">missing_vendor_option:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'缺少 :vendor 选项。'</span></div><div class="line">            <span class="symbol">summary:</span> <span class="string">'当版本号使用 Header 指定时，必须指定 :vendor 选项。'</span></div><div class="line">            <span class="symbol">resolution:</span> <span class="string">"如：version 'v1', using: :header, vendor: 'twitter'"</span></div><div class="line">          <span class="symbol">missing_mime_type:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'缺少 %&#123;new_format&#125; 的 MIME 类型。'</span></div><div class="line">            <span class="symbol">resolution:</span></div><div class="line">              <span class="string">"你可以在 Grape::ContentTypes::CONTENT_TYPES 预置的 MIME 类型中选择一个，或者</span></div><div class="line"><span class="string">              通过 content_type :%&#123;new_format&#125;, 'application/%&#123;new_format&#125;' 自定义一个</span></div><div class="line"><span class="string">              "</span></div><div class="line">          <span class="symbol">invalid_with_option_for_represent:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'你必须通过 :with 选项指定一个 entity 类。'</span></div><div class="line">            <span class="symbol">resolution:</span> <span class="string">'如：represent User, :with =&gt; Entity::User'</span></div><div class="line">          <span class="symbol">missing_option:</span> <span class="string">'你必须指定 :%&#123;option&#125; 选项。'</span></div><div class="line">          <span class="symbol">invalid_formatter:</span> <span class="string">'不能将类型 %&#123;klass&#125; 转换为 %&#123;to_format&#125;'</span></div><div class="line">          <span class="symbol">invalid_versioner_option:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'version 声明中 :using 选项的取值：%&#123;strategy&#125; 无法识别。'</span></div><div class="line">            <span class="symbol">resolution:</span> <span class="string">'有效的 :using 取值为 :path，:header 或 :param'</span></div><div class="line">          <span class="symbol">unknown_validator:</span> <span class="string">'未知的校验器: %&#123;validator_type&#125;'</span></div><div class="line">          <span class="symbol">unknown_options:</span> <span class="string">'未知选项：%&#123;options&#125;'</span></div><div class="line">          <span class="symbol">unknown_parameter:</span> <span class="string">'未知参数：%&#123;param&#125;'</span></div><div class="line">          <span class="symbol">incompatible_option_values:</span> <span class="string">'%&#123;option1&#125;: %&#123;value1&#125; 和 %&#123;option2&#125;: %&#123;value2&#125; 不兼容'</span></div><div class="line">          <span class="symbol">mutual_exclusion:</span> <span class="string">'是互斥的'</span></div><div class="line">          <span class="symbol">at_least_one:</span> <span class="string">'缺失, 至少需要提供一个参数'</span></div><div class="line">          <span class="symbol">exactly_one:</span> <span class="string">'缺失, 只能提供一个参数'</span></div><div class="line">          <span class="symbol">all_or_none:</span> <span class="string">'提供全部参数，或者都不提供'</span></div><div class="line">          <span class="symbol">missing_group_type:</span> <span class="string">'需要提够 group 类型'</span></div><div class="line">          <span class="symbol">unsupported_group_type:</span> <span class="string">'group 类型只能是 Array 或 Hash'</span></div><div class="line">          <span class="symbol">invalid_message_body:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">"信息内容和指定的格式不相符"</span></div><div class="line">            <span class="symbol">resolution:</span></div><div class="line">              <span class="string">"当指定 %&#123;body_format&#125; 作为 content-type 时，你必须在请求的 'body' 中</span></div><div class="line"><span class="string">              传递一个有效的 %&#123;body_format&#125;'</span></div><div class="line"><span class="string">              "</span></div><div class="line">          <span class="symbol">invalid_accept_header:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'无效的 Accept Header'</span></div><div class="line">            <span class="symbol">resolution:</span> <span class="string">'%&#123;message&#125;'</span></div><div class="line">          <span class="symbol">invalid_version_header:</span></div><div class="line">            <span class="symbol">problem:</span> <span class="string">'无效的 version header'</span></div><div class="line">            <span class="symbol">resolution:</span> <span class="string">'%&#123;message&#125;'</span></div><div class="line">    <span class="symbol">errors:</span></div><div class="line">      <span class="symbol">messages:</span></div><div class="line">        <span class="symbol">extension_white_list_error:</span> <span class="string">'文件类型不允许'</span></div><div class="line">    <span class="symbol">views:</span></div><div class="line">      <span class="symbol">pagination:</span></div><div class="line">        <span class="symbol">first:</span> <span class="string">"&amp;laquo;"</span></div><div class="line">        <span class="symbol">last:</span> <span class="string">"&amp;raquo;"</span></div><div class="line">        <span class="symbol">previous:</span> <span class="string">"&amp;lsaquo;"</span></div><div class="line">        <span class="symbol">next:</span> <span class="string">"&amp;rsaquo;"</span></div><div class="line">        <span class="symbol">truncate:</span> <span class="string">"&amp;hellip;"</span></div><div class="line">    <span class="symbol">helpers:</span></div><div class="line">      <span class="symbol">page_entries_info:</span></div><div class="line">        <span class="symbol">one_page:</span></div><div class="line">          <span class="symbol">display_entries:</span></div><div class="line">            <span class="symbol">zero:</span> <span class="string">"No %&#123;entry_name&#125; found"</span></div><div class="line">            <span class="symbol">one:</span> <span class="string">"Displaying &lt;b&gt;1&lt;/b&gt; %&#123;entry_name&#125;"</span></div><div class="line">            <span class="symbol">other:</span> <span class="string">"Displaying &lt;b&gt;all %&#123;count&#125;&lt;/b&gt; %&#123;entry_name&#125;"</span></div><div class="line">        <span class="symbol">more_pages:</span></div><div class="line">          <span class="symbol">display_entries:</span> <span class="string">"Displaying %&#123;entry_name&#125; &lt;b&gt;%&#123;first&#125;&amp;nbsp;-&amp;nbsp;%&#123;last&#125;&lt;/b&gt; of &lt;b&gt;%&#123;total&#125;&lt;/b&gt; in total"</span></div><div class="line">    <span class="symbol">flash:</span></div><div class="line">      <span class="symbol">create:</span></div><div class="line">        <span class="symbol">success:</span> <span class="string">'创建成功'</span></div><div class="line">      <span class="symbol">update:</span></div><div class="line">        <span class="symbol">success:</span> <span class="string">'更新成功'</span></div><div class="line">    <span class="symbol">date:</span></div><div class="line">      <span class="symbol">abbr_day_names:</span></div><div class="line">      - 日</div><div class="line">      - 一</div><div class="line">      - 二</div><div class="line">      - 三</div><div class="line">      - 四</div><div class="line">      - 五</div><div class="line">      - 六</div><div class="line">      <span class="symbol">abbr_month_names:</span></div><div class="line">      -</div><div class="line">      - <span class="number">1</span>月</div><div class="line">      - <span class="number">2</span>月</div><div class="line">      - <span class="number">3</span>月</div><div class="line">      - <span class="number">4</span>月</div><div class="line">      - <span class="number">5</span>月</div><div class="line">      - <span class="number">6</span>月</div><div class="line">      - <span class="number">7</span>月</div><div class="line">      - <span class="number">8</span>月</div><div class="line">      - <span class="number">9</span>月</div><div class="line">      - <span class="number">10</span>月</div><div class="line">      - <span class="number">11</span>月</div><div class="line">      - <span class="number">12</span>月</div><div class="line">      <span class="symbol">day_names:</span></div><div class="line">      - 星期日</div><div class="line">      - 星期一</div><div class="line">      - 星期二</div><div class="line">      - 星期三</div><div class="line">      - 星期四</div><div class="line">      - 星期五</div><div class="line">      - 星期六</div><div class="line">      <span class="symbol">formats:</span></div><div class="line">        <span class="symbol">default:</span> ! <span class="string">'%Y-%m-%d'</span></div><div class="line">        <span class="symbol">long:</span> ! <span class="string">'%Y年%b%d日'</span></div><div class="line">        <span class="symbol">short:</span> ! <span class="string">'%b%d日'</span></div><div class="line">      <span class="symbol">month_names:</span></div><div class="line">      -</div><div class="line">      - 一月</div><div class="line">      - 二月</div><div class="line">      - 三月</div><div class="line">      - 四月</div><div class="line">      - 五月</div><div class="line">      - 六月</div><div class="line">      - 七月</div><div class="line">      - 八月</div><div class="line">      - 九月</div><div class="line">      - 十月</div><div class="line">      - 十一月</div><div class="line">      - 十二月</div><div class="line">      <span class="symbol">order:</span></div><div class="line">      - <span class="symbol">:year</span></div><div class="line">      - <span class="symbol">:month</span></div><div class="line">      - <span class="symbol">:day</span></div><div class="line">    <span class="symbol">datetime:</span></div><div class="line">      <span class="symbol">distance_in_words:</span></div><div class="line">        <span class="symbol">about_x_hours:</span></div><div class="line">          <span class="symbol">one:</span> 大约一小时</div><div class="line">          <span class="symbol">other:</span> 大约 <span class="string">%&#123;count&#125;</span> 小时</div><div class="line">        <span class="symbol">about_x_months:</span></div><div class="line">          <span class="symbol">one:</span> 大约一个月</div><div class="line">          <span class="symbol">other:</span> 大约 <span class="string">%&#123;count&#125;</span> 个月</div><div class="line">        <span class="symbol">about_x_years:</span></div><div class="line">          <span class="symbol">one:</span> 大约一年</div><div class="line">          <span class="symbol">other:</span> 大约 <span class="string">%&#123;count&#125;</span> 年</div><div class="line">        <span class="symbol">almost_x_years:</span></div><div class="line">          <span class="symbol">one:</span> 接近一年</div><div class="line">          <span class="symbol">other:</span> 接近 <span class="string">%&#123;count&#125;</span> 年</div><div class="line">        <span class="symbol">half_a_minute:</span> 半分钟</div><div class="line">        <span class="symbol">less_than_x_minutes:</span></div><div class="line">          <span class="symbol">one:</span> 不到一分钟</div><div class="line">          <span class="symbol">other:</span> 不到 <span class="string">%&#123;count&#125;</span> 分钟</div><div class="line">        <span class="symbol">less_than_x_seconds:</span></div><div class="line">          <span class="symbol">one:</span> 不到一秒</div><div class="line">          <span class="symbol">other:</span> 不到 <span class="string">%&#123;count&#125;</span> 秒</div><div class="line">        <span class="symbol">over_x_years:</span></div><div class="line">          <span class="symbol">one:</span> 一年多</div><div class="line">          <span class="symbol">other:</span> ! <span class="string">'%&#123;count&#125; 年多'</span></div><div class="line">        <span class="symbol">x_days:</span></div><div class="line">          <span class="symbol">one:</span> 一天</div><div class="line">          <span class="symbol">other:</span> ! <span class="string">'%&#123;count&#125; 天'</span></div><div class="line">        <span class="symbol">x_minutes:</span></div><div class="line">          <span class="symbol">one:</span> 一分钟</div><div class="line">          <span class="symbol">other:</span> ! <span class="string">'%&#123;count&#125; 分钟'</span></div><div class="line">        <span class="symbol">x_months:</span></div><div class="line">          <span class="symbol">one:</span> 一个月</div><div class="line">          <span class="symbol">other:</span> ! <span class="string">'%&#123;count&#125; 个月'</span></div><div class="line">        <span class="symbol">x_seconds:</span></div><div class="line">          <span class="symbol">one:</span> 一秒</div><div class="line">          <span class="symbol">other:</span> ! <span class="string">'%&#123;count&#125; 秒'</span></div><div class="line">      <span class="symbol">prompts:</span></div><div class="line">        <span class="symbol">day:</span> 日</div><div class="line">        <span class="symbol">hour:</span> 时</div><div class="line">        <span class="symbol">minute:</span> 分</div><div class="line">        <span class="symbol">month:</span> 月</div><div class="line">        <span class="symbol">second:</span> 秒</div><div class="line">        <span class="symbol">year:</span> 年</div><div class="line">    <span class="symbol">errors:</span> &amp;errors</div><div class="line">      <span class="symbol">format:</span> ! <span class="string">'%&#123;attribute&#125; %&#123;message&#125;'</span></div><div class="line">      <span class="symbol">messages:</span></div><div class="line">        <span class="symbol">accepted:</span> 必须是可被接受的</div><div class="line">        <span class="symbol">blank:</span> 不能为空</div><div class="line">        <span class="symbol">confirmation:</span> 不一致</div><div class="line">        <span class="symbol">empty:</span> 不能留空</div><div class="line">        <span class="symbol">equal_to:</span> 必须等于 <span class="string">%&#123;count&#125;</span></div><div class="line">        <span class="symbol">even:</span> 必须为双数</div><div class="line">        <span class="symbol">exclusion:</span> 是保留关键字</div><div class="line">        <span class="symbol">greater_than:</span> 必须大于 <span class="string">%&#123;count&#125;</span></div><div class="line">        <span class="symbol">greater_than_or_equal_to:</span> 必须大于或等于 <span class="string">%&#123;count&#125;</span></div><div class="line">        <span class="symbol">inclusion:</span> 不包含于列表中</div><div class="line">        <span class="symbol">invalid:</span> 是无效的</div><div class="line">        <span class="symbol">less_than:</span> 必须小于 <span class="string">%&#123;count&#125;</span></div><div class="line">        <span class="symbol">less_than_or_equal_to:</span> 必须小于或等于 <span class="string">%&#123;count&#125;</span></div><div class="line">        <span class="symbol">not_a_number:</span> 不是数字</div><div class="line">        <span class="symbol">not_an_integer:</span> 必须是整数</div><div class="line">        <span class="symbol">odd:</span> 必须为单数</div><div class="line">        <span class="symbol">record_invalid:</span> ! <span class="string">'%&#123;errors&#125;'</span></div><div class="line">        <span class="symbol">taken:</span> 已经被使用</div><div class="line">        <span class="symbol">too_long:</span> 过长（最长为 <span class="string">%&#123;count&#125;</span> 个字符）</div><div class="line">        <span class="symbol">too_short:</span> 过短（最短为 <span class="string">%&#123;count&#125;</span> 个字符）</div><div class="line">        <span class="symbol">wrong_length:</span> 长度非法（必须为 <span class="string">%&#123;count&#125;</span> 个字符）</div><div class="line">        <span class="symbol">extension_white_list_error:</span> 不允许的文件类型</div><div class="line">      <span class="symbol">template:</span></div><div class="line">        <span class="symbol">body:</span> 如下字段出现错误：</div><div class="line">        <span class="symbol">header:</span></div><div class="line">          <span class="symbol">one:</span> 有 <span class="number">1</span> 个错误发生导致「<span class="string">%&#123;model&#125;</span>」无法被保存。</div><div class="line">          <span class="symbol">other:</span> 有 <span class="string">%&#123;count&#125;</span> 个错误发生导致「<span class="string">%&#123;model&#125;</span>」无法被保存。</div><div class="line">    <span class="symbol">helpers:</span></div><div class="line">      <span class="symbol">select:</span></div><div class="line">        <span class="symbol">prompt:</span> 请选择</div><div class="line">      <span class="symbol">submit:</span></div><div class="line">        <span class="symbol">create:</span> 新增<span class="string">%&#123;model&#125;</span></div><div class="line">        <span class="symbol">submit:</span> 保存<span class="string">%&#123;model&#125;</span></div><div class="line">        <span class="symbol">update:</span> 更新<span class="string">%&#123;model&#125;</span></div><div class="line">    <span class="symbol">number:</span></div><div class="line">      <span class="symbol">currency:</span></div><div class="line">        <span class="symbol">format:</span></div><div class="line">          <span class="symbol">delimiter:</span> ! <span class="string">','</span></div><div class="line">          <span class="symbol">format:</span> ! <span class="string">'%u %n'</span></div><div class="line">          <span class="symbol">precision:</span> <span class="number">2</span></div><div class="line">          <span class="symbol">separator:</span> .</div><div class="line">          <span class="symbol">significant:</span> <span class="literal">false</span></div><div class="line">          <span class="symbol">strip_insignificant_zeros:</span> <span class="literal">false</span></div><div class="line">          <span class="symbol">unit:</span> CN¥</div><div class="line">      <span class="symbol">format:</span></div><div class="line">        <span class="symbol">delimiter:</span> ! <span class="string">','</span></div><div class="line">        <span class="symbol">precision:</span> <span class="number">3</span></div><div class="line">        <span class="symbol">separator:</span> .</div><div class="line">        <span class="symbol">significant:</span> <span class="literal">false</span></div><div class="line">        <span class="symbol">strip_insignificant_zeros:</span> <span class="literal">false</span></div><div class="line">      <span class="symbol">human:</span></div><div class="line">        <span class="symbol">decimal_units:</span></div><div class="line">          <span class="symbol">format:</span> ! <span class="string">'%n %u'</span></div><div class="line">          <span class="symbol">units:</span></div><div class="line">            <span class="symbol">billion:</span> 十亿</div><div class="line">            <span class="symbol">million:</span> 百万</div><div class="line">            <span class="symbol">quadrillion:</span> 千兆</div><div class="line">            <span class="symbol">thousand:</span> 千</div><div class="line">            <span class="symbol">trillion:</span> 兆</div><div class="line">            <span class="symbol">unit:</span> <span class="string">''</span></div><div class="line">        <span class="symbol">format:</span></div><div class="line">          <span class="symbol">delimiter:</span> <span class="string">''</span></div><div class="line">          <span class="symbol">precision:</span> <span class="number">1</span></div><div class="line">          <span class="symbol">significant:</span> <span class="literal">false</span></div><div class="line">          <span class="symbol">strip_insignificant_zeros:</span> <span class="literal">false</span></div><div class="line">        <span class="symbol">storage_units:</span></div><div class="line">          <span class="symbol">format:</span> ! <span class="string">'%n %u'</span></div><div class="line">          <span class="symbol">units:</span></div><div class="line">            <span class="symbol">byte:</span></div><div class="line">              <span class="symbol">one:</span> Byte</div><div class="line">              <span class="symbol">other:</span> Bytes</div><div class="line">            <span class="symbol">gb:</span> GB</div><div class="line">            <span class="symbol">kb:</span> KB</div><div class="line">            <span class="symbol">mb:</span> MB</div><div class="line">            <span class="symbol">tb:</span> TB</div><div class="line">      <span class="symbol">percentage:</span></div><div class="line">        <span class="symbol">format:</span></div><div class="line">          <span class="symbol">delimiter:</span> <span class="string">''</span></div><div class="line">      <span class="symbol">precision:</span></div><div class="line">        <span class="symbol">format:</span></div><div class="line">          <span class="symbol">delimiter:</span> <span class="string">''</span></div><div class="line">    <span class="symbol">support:</span></div><div class="line">      <span class="symbol">array:</span></div><div class="line">        <span class="symbol">last_word_connector:</span> ! <span class="string">', 和 '</span></div><div class="line">        <span class="symbol">two_words_connector:</span> ! <span class="string">' 和 '</span></div><div class="line">        <span class="symbol">words_connector:</span> ! <span class="string">', '</span></div><div class="line">    <span class="symbol">time:</span></div><div class="line">      <span class="symbol">am:</span> 上午</div><div class="line">      <span class="symbol">formats:</span></div><div class="line">        <span class="symbol">default:</span> ! <span class="string">'%Y年%b%d日 %H:%M:%S'</span></div><div class="line">        <span class="symbol">full:</span> ! <span class="string">'%Y年%b%d日 %A %H:%M:%S %Z'</span></div><div class="line">        <span class="symbol">long:</span> ! <span class="string">'%Y年%b%d日 %H:%M'</span></div><div class="line">        <span class="symbol">short:</span> ! <span class="string">'%b%d日 %H:%M'</span></div><div class="line">      <span class="symbol">pm:</span> 下午</div><div class="line">    <span class="symbol">activerecord:</span></div><div class="line">      <span class="symbol">models:</span></div><div class="line">        <span class="symbol">invoice:</span></div><div class="line">          <span class="symbol">status:</span></div><div class="line">            <span class="symbol">canceled:</span> 已取消</div><div class="line">            <span class="symbol">closed:</span> 关闭</div><div class="line">            <span class="symbol">rejected:</span> 审核不通过</div><div class="line">            <span class="symbol">wait_audit:</span> 等待审核</div><div class="line">            <span class="symbol">passed:</span> 审核通过</div><div class="line">            <span class="symbol">invoiced:</span> 已开票</div><div class="line">          <span class="symbol">service_type:</span></div><div class="line">            <span class="symbol">print:</span> 印刷品</div><div class="line">            <span class="symbol">service_fee:</span> 服务费</div><div class="line">          <span class="symbol">buyer_type:</span></div><div class="line">            <span class="symbol">individual:</span> 个人</div><div class="line">            <span class="symbol">unit:</span> 单位</div><div class="line">        <span class="symbol">user_invoice_info:</span></div><div class="line">          <span class="symbol">default:</span></div><div class="line">            <span class="symbol">true:</span> 是</div><div class="line">            <span class="symbol">false:</span> 否</div><div class="line">      <span class="symbol">errors:</span></div><div class="line">        &lt;&lt;: *errors</div><div class="line">YAML</div><div class="line">file <span class="string">'README.md'</span>, &lt;&lt;~MD</div><div class="line">  <span class="comment">### #&#123;self.app_path&#125;服务</span></div><div class="line">  接口信息请下载本项目并在本地启动后查看 <span class="symbol">http:</span>/<span class="regexp">/localhost:你的端口号/api</span><span class="regexp">/swagger#/</span></div><div class="line">MD</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[2019年黑苹果开发机配置]]></title>
      <url>/2019/06/24/2019%E5%B9%B4%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="2019年6月24日更新"><a href="#2019年6月24日更新" class="headerlink" title="2019年6月24日更新"></a>2019年6月24日更新</h3><p>前两天由于mac下配置开发环境有些问题，使用了一次恢复备份（在windwos下恢复成功了，由于SSD 恢复时间大概在10分钟以内60G左右资料），现在改用虚拟机开发了回头写一篇记录mac下虚拟机开发 docker下开发 mac下开发的有点和缺点。</p>
<h3 id="2019年6月10日更新"><a href="#2019年6月10日更新" class="headerlink" title="2019年6月10日更新"></a>2019年6月10日更新</h3><p>之前系统做好后淘宝技术告诉我电脑不要睡眠容易睡死，我一直睡眠使用没啥事，端午节假期睡了三天，我回去发现已经重启了，然后引导可以进去但是黑果一进去就黑屏，自己在win上瞎捅咕还给bcd误删导致win也进不去了，但是引导还在。我重装了win后，通过引导能够进入黑果和win了，数据没有丢失，一切还是睡眠时的样子 万幸，毕竟如果数据丢失重装费时费力。所以还是别作死睡眠了，下班要么就让他一直在那开机，关显示器，要不就关机。</p>
<h3 id="2019年5月8日更新"><a href="#2019年5月8日更新" class="headerlink" title="2019年5月8日更新"></a>2019年5月8日更新</h3><p>换了LG 4K IPS显示器，显示效果和15寸的mbp效果差不多了，成本2099元，618京东这款显示器1799感觉自己亏了一个亿</p>
<h3 id="2019-04-28更新"><a href="#2019-04-28更新" class="headerlink" title="2019-04-28更新"></a>2019-04-28更新</h3><p>目前使用了一段时间</p>
<ul>
<li>app store使用正常</li>
<li>睡眠唤醒正常,后续验证长时间睡眠会睡死</li>
<li>声卡正常</li>
<li>显卡正常</li>
<li>蓝牙安装了一个USB 蓝牙正常</li>
<li>台式机我连网线但是我安装了一个TP_link300m USB 无线网卡正常</li>
<li>iTunes正常</li>
<li>安装ruby开发环境基本和MBP 安装一样的套路</li>
<li>安装了一个office2019(新系统无法使用2016)</li>
<li>安装了一个PS(虽然我不会用我就是装上试试看)</li>
<li>安装了final cut pro(破解版，我也不会用就是试试看)</li>
<li>air drop 貌似不可用虽然我有一个USB无线网卡:negative_squared_cross_mark:</li>
<li>睡眠再唤醒也是可以的(后续测试时间长会睡死)</li>
</ul>
<p>不过么我现在已经是24小时不关机了 大概半个月了emmm 用mac的人是不是也和我一样<br>有了不关机的坏(good)习惯呢? 可惜我没有4K 显示器不然可以试试是不是3个DP 口输出3台4K 显示呢。</p>
<h3 id="2019-04-17更新"><a href="#2019-04-17更新" class="headerlink" title="2019-04-17更新"></a>2019-04-17更新</h3><p>由于最近内存条价格比较低，又购入了2条幻光戟，emmm插满！！！<br>这中间出现了一点问题就是这个T400CPU 散热比较宽占用了一部分内存的插槽，<br>由于幻光戟内存很高挡住了，这里把T400 的风扇往上提了一些刚刚够放下内存。</p>
<h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><h4 id="机箱侧面"><a href="#机箱侧面" class="headerlink" title="机箱侧面"></a>机箱侧面</h4><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1409/2019/d2b5ca33bd970f64a6301fa75ae2eb22.png" alt=""><br><a id="more"></a></p>
<h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1368/2019/6d15952ab07475b42f890b5f4e16198f.png" alt=""></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>一直做ruby开发使用mac，由于之前的主力开发机是一台macbookpro 2013早期的顶配版本(i7 3610QM + 16G ddr3 1600 + 256G固态)，虽然现在使用依然是没什么问题的，但是人类毕竟是喜新厌旧(其实性能已经并不算很快了)的想要提升一下硬件，而且也算是满足我想玩黑苹果的心吧。</p>
<h3 id="第一次装机经历"><a href="#第一次装机经历" class="headerlink" title="第一次装机经历"></a>第一次装机经历</h3><p>在这之前呢我查阅了很多的资料包括黑苹果配置，做了一些功课，然后再我家里使用的一台16年淘宝购入的整机上做测试（除了声卡开机有音爆以外）是可以稳定运行的，并且搭建了开发环境在家作为偶尔加班的开发机和游戏机双系统<br>主要配置如下：</p>
<ul>
<li><p>CPU: i5 6500</p>
</li>
<li><p>主板: 七彩虹B150M</p>
</li>
<li><p>内存: 金士顿2133 8G * 2</p>
</li>
<li><p>显卡: GTX950 2G</p>
</li>
<li><p>固态: 金泰克120G SATA3</p>
</li>
<li><p>机械: 希捷1T绿盘</p>
</li>
<li><p>电源: 鑫谷额定 300W</p>
</li>
<li><p>机箱: 爱国者</p>
</li>
<li><p>散热: 原装下压式散热 + 12CM风扇 * 2</p>
</li>
<li><p>2016年合计3800</p>
</li>
</ul>
<p>由于在这之前windows搭建在了固态上，所以这次把macos搭建在了机械硬盘位，分区300G给系统，安装完之后由于是机械硬盘所以使用起来是不如macbookpro的固态的，其他功能正常。我本人比较懒找的淘宝黑苹果远程装机130元就搞定了，不好的地方就是刚开始安装的时候主板输出到核心显卡，而我显示器插得独显所以一开始黑屏浪费了不少时间。</p>
<h3 id="本次装机准备"><a href="#本次装机准备" class="headerlink" title="本次装机准备"></a>本次装机准备</h3><p>有了第一次的装机之后我知道黑苹果系统也可以很稳定完全可以当做主力机来工作，而且由于其配件的价格对比macbookpro或者imac有一定的优势(主要还是白苹果太贵了 - -)，可定制化也很强（比如加硬盘，内存这种操作很简单）为后续的加配置也算留有余地。由于新款的imac大多采用了A卡，所以新系统对于部分型号的A卡是免驱的，小伙伴如果想要组装最新系统的黑苹果要选择A卡。</p>
<p>由于本次选用的CPU是当前性价比最高的9400F，它相对于AMD cpu安装黑苹果更加稳定可靠，毕竟苹果笔记本和imac 也都是使用了intel的cpu。</p>
<p>主板其实本来打算技嘉B360 M AORUS PRO “小雕”，传闻苹果很多主机的主板都是由技嘉代工的所以兼容性没有问题，而且考虑到以后有可能要升级CPU 为8700，此款主板配合8700 CPU 是不会降频的，但是由于装机时找的朋友他那里暂时没有这个，所以就找了同样非常不错的微星B360M 迫击炮，同样可以黑苹果并且上8700 不会降频。</p>
<p>内存选择本来是不应该选择芝奇幻光戟C16 3000 的，因为这款主板内存的频率最高只能支持到2666Mhz，但是由于芝奇幻光戟RGB太帅了emmm😀，如果不喜欢光污染换两条金士顿骇客神条2666估计能省200多，而且这两条内存带的散热装甲过高所以现在内存条有一个插槽是无法插内存的会和CPU 散热风扇冲突这点值得注意。</p>
<p>固态采用了双固态一个给windows，一个给mac系统两不耽误，而且这款主板支持2个M.2接口的固态正好，相比SATA3接口m.2(nvme)更快，值得注意的是如果装双系统windows要采用UEFI安装，这样才能正确引导黑苹果。</p>
<p>主要配置如下:</p>
<ul>
<li><p>CPU: i5 9400F(无核显)</p>
</li>
<li><p>主板: 微星B360M 迫击炮</p>
</li>
<li><p>内存: 芝奇幻光戟C16 3000 8G * 4</p>
</li>
<li><p>显卡: 蓝宝石 RX590 8G 海外版</p>
</li>
<li><p>固态: 影驰 铁甲战将240G m.2(nvme协议) 装win10 + mac引导和数据恢复</p>
</li>
<li><p>固态: 西部数据 SN750黑盘 250G m.2(nvme协议) 装macos 10.14.4</p>
</li>
<li><p>机械: 无</p>
</li>
<li><p>电源: 航嘉GX600 白牌</p>
</li>
<li><p>机箱: TTF1</p>
</li>
<li><p>散热: 九州风神玄冰400 + 九州风神魔环 * 2</p>
</li>
<li><p>手办: 雪之下雪乃、 卧姿蕾姆</p>
</li>
<li><p>总计: 6800元</p>
</li>
</ul>
<h3 id="最后要说的话"><a href="#最后要说的话" class="headerlink" title="最后要说的话"></a>最后要说的话</h3><p>如果小伙伴对苹果系统有需求或者想体验一下可以尝试，配置选好是关键，选好了装系统都是水到渠成，wifi和蓝牙可以上网查苹果免驱版pcie接口的。如果是工作需要也是可以考虑的，要注意主机不比macbookpro，它没有很好的便携性，如果是做设计或者视频剪辑对显示器有要求可以上4K（显卡要好），如果什么都不懂还是老老实实的查，如果和我一样懒或者比我更懒不想在这方面浪费时间，可以尝试把精力都用来学习专业知识赚更多的钱，直接买白苹果毕竟白苹果的体验是最好的。保持好心态加油。</p>
]]></content>
      
        
        <tags>
            
            <tag> 黑苹果 </tag>
            
            <tag> 电脑配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rails项目搭建rabbitmq消息中间件]]></title>
      <url>/2019/01/18/Rails%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BArabbitmq%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/1111/2019/243dcedfb3893c477a585710f2918e86.jpg" alt=""><br><a id="more"></a></p>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>首先 安装 rabbitmq 到本机<br>Mac下 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install rabbitmq</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-server</div></pre></td></tr></table></figure></p>
<p>默认可以访问<a href="http://localhost:15672/#/" target="_blank" rel="external">http://localhost:15672/#/</a> web服务界面 会有默认的用户名guest和密码guest</p>
<p>如果想要使用其他用户 可以创建和修改并赋予权限</p>
<p>在本地项目启动 redis-server 启动 sidekiq 这里sidekiq 只是作为队列使用 有大量消息时 使用队列发送到mq</p>
<p>在生产消息的项目中安装gem  bunny 他是一个生产者可以帮你使用mq并创建信道和发送消息</p>
<p>在需要消费的项目中安装 sneaker 他是一个消费者 可以接收</p>
<p>rabbitmq的消费队列和exchange对应关系需在web 上手动操作<br>也可以在创建消费队列的时候配置</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from_queue <span class="string">'q.message.service.user_message.create'</span>,</div><div class="line">            <span class="symbol">durable:</span> <span class="literal">true</span>,</div><div class="line">            <span class="symbol">exchange:</span> <span class="string">'ex.message_service.user_message'</span>,</div><div class="line">            <span class="symbol">exchange_type:</span> <span class="string">'topic'</span>,</div><div class="line">            <span class="symbol">routing_key:</span> <span class="string">'message.create'</span></div></pre></td></tr></table></figure>
<p>这里配置好队列于exchange的关系</p>
<p>关于bunny和sneakers 的使用<a href="https://ruby-china.org/topics/35230" target="_blank" rel="external">这里</a>有教程</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rabbitmq:</span></div><div class="line"><span class="attr">   amqp:</span> <span class="string">'amqp://staging:rabbitdev@localhost:5672'</span>  <span class="comment"># 用户名:密码@本地的服务地址</span></div><div class="line"><span class="attr">   vhost:</span> <span class="string">'msgbus.staging.yiqiyin.com'</span> <span class="comment">#  vhost 虚拟主机名称</span></div><div class="line"><span class="attr">   timeout_job_after:</span> <span class="number">180</span> <span class="comment"># 3.minutes 超时时间</span></div><div class="line"><span class="attr">   daemonize:</span> <span class="literal">true</span>   <span class="comment"># 守护进程</span></div></pre></td></tr></table></figure>
<p>Sneakers worker 有修改的话每次都要重新启动一次 sneakers 服务</p>
<p>项目下 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rake sneakers:run</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先消息队列和中间件可以将很多不需要及时同步的操作在队列中执行，降低服务器等待时间和负载，并且微服务的模块保证自己模块做更简单的事情解耦，并且可以给对应的站点添加还是不添加此功能提供了很多的可选择性，比如注册成功邮件，激活邮箱邮件，发放优惠券等操作，<br>同时又要注意不要为了微服务而做微服务，还要考虑这样的架构如果在某一步消息丢失了或者执行失败了如何处理，sneakers有对应的异常处理机制，比如说有消息一直消费失败在重试一定次数后可以选择丢入dieline，等待后续查看失败原因等等。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> sneakers </tag>
            
            <tag> bunny </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用gem整理]]></title>
      <url>/2018/12/18/%E5%B8%B8%E7%94%A8gem%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="记录自己工作中常用的gem"><a href="#记录自己工作中常用的gem" class="headerlink" title="记录自己工作中常用的gem"></a>记录自己工作中常用的gem</h3><a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql数据库</span></div><div class="line">gem <span class="string">'mysql2'</span></div><div class="line">gem <span class="string">'pg'</span></div><div class="line"></div><div class="line"><span class="comment"># markdown</span></div><div class="line">gem <span class="string">'redcarpet'</span></div><div class="line">gem <span class="string">'rouge'</span></div><div class="line"></div><div class="line"><span class="comment"># configuration</span></div><div class="line">gem <span class="string">'config'</span></div><div class="line"></div><div class="line"><span class="comment"># 工作流</span></div><div class="line">gem <span class="string">'aasm'</span></div><div class="line">gem <span class="string">'workflow'</span></div><div class="line"></div><div class="line"><span class="comment"># 队列相关</span></div><div class="line">gem <span class="string">'sidekiq'</span></div><div class="line">gem <span class="string">'sidekiq-failures'</span></div><div class="line">gem <span class="string">'sidekiq-limit_fetch'</span></div><div class="line"></div><div class="line"><span class="comment"># 定时任务</span></div><div class="line">gem <span class="string">'whenever'</span></div><div class="line"></div><div class="line"><span class="comment"># 面包屑</span></div><div class="line">gem <span class="string">'breadcrumbs_on_rails'</span></div><div class="line"></div><div class="line"><span class="comment"># 权限</span></div><div class="line">gem <span class="string">'cancancan'</span></div><div class="line">gem <span class="string">"pundit"</span></div><div class="line"></div><div class="line"><span class="comment"># 审计</span></div><div class="line">gem <span class="string">"audited"</span></div><div class="line">gem <span class="string">"audited-activerecord"</span></div><div class="line"></div><div class="line"><span class="comment"># 部署</span></div><div class="line">gem <span class="string">'puma'</span></div><div class="line">gem <span class="string">'mina'</span></div><div class="line"></div><div class="line"><span class="comment"># Excel处理</span></div><div class="line">gem <span class="string">'spreadsheet'</span></div><div class="line"></div><div class="line"><span class="comment"># 上传</span></div><div class="line">gem <span class="string">'carrierwave'</span></div><div class="line">gem <span class="string">'mini_magick'</span></div><div class="line"></div><div class="line"><span class="comment"># elasticsearch</span></div><div class="line">gem <span class="string">'searchkick'</span>, <span class="string">'1.3.3'</span></div><div class="line"></div><div class="line"><span class="comment"># 查询</span></div><div class="line">gem <span class="string">'ransack'</span></div><div class="line"></div><div class="line"><span class="comment"># 调试</span></div><div class="line">gem <span class="string">'pry-rails'</span></div><div class="line">gem <span class="string">'pry-byebug'</span></div><div class="line"></div><div class="line"><span class="comment"># 分页</span></div><div class="line">gem <span class="string">'kaminari'</span></div><div class="line"></div><div class="line"><span class="comment"># 消息队列</span></div><div class="line">gem <span class="string">'bunny'</span></div><div class="line"></div><div class="line"><span class="comment"># redis cache</span></div><div class="line">gem <span class="string">'redis-namespace'</span></div><div class="line">gem <span class="string">'redis-rails'</span></div><div class="line"></div><div class="line"><span class="comment"># tag</span></div><div class="line">gem <span class="string">'acts-as-taggable-on'</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> gem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>/2018/12/18/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="拉取远端分支"><a href="#拉取远端分支" class="headerlink" title="拉取远端分支"></a>拉取远端分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D 分支名</div></pre></td></tr></table></figure>
<h3 id="删除远端分支"><a href="#删除远端分支" class="headerlink" title="删除远端分支"></a>删除远端分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete 分支名</div></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout branch</div></pre></td></tr></table></figure>
<h3 id="回到某次提交"><a href="#回到某次提交" class="headerlink" title="回到某次提交"></a>回到某次提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD^</div></pre></td></tr></table></figure>
<h3 id="合并commit到本分支"><a href="#合并commit到本分支" class="headerlink" title="合并commit到本分支"></a>合并commit到本分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge --commit</div></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge branch</div></pre></td></tr></table></figure>
<h3 id="暂存未提交更改"><a href="#暂存未提交更改" class="headerlink" title="暂存未提交更改"></a>暂存未提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<h3 id="从暂存区取出修改"><a href="#从暂存区取出修改" class="headerlink" title="从暂存区取出修改"></a>从暂存区取出修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply</div></pre></td></tr></table></figure>
<h3 id="查看当前修改"><a href="#查看当前修改" class="headerlink" title="查看当前修改"></a>查看当前修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL分类统计]]></title>
      <url>/2018/11/21/SQL%E5%88%86%E7%B1%BB%E7%BB%9F%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="用SQL分类统计来避免循环"><a href="#用SQL分类统计来避免循环" class="headerlink" title="用SQL分类统计来避免循环"></a>用SQL分类统计来避免循环</h2><blockquote>
<p>假设有一张表 users, 其中category字段表示用户的类型，假设 99 代表管理员，1代表门店，2代表工厂，当我们要统计 每个类型的人数的时候可以这样统计</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">99</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'admin'</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'formal'</span>,</div><div class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">category</span>=<span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'factory'</span></div><div class="line"><span class="keyword">from</span> <span class="keyword">users</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果不使用分类统计的话可能要将用户查询出来进行遍历叠加的方式算出每种类型的人有多少个</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin   formal   factory</div><div class="line">8        1846     28</div></pre></td></tr></table></figure>
<blockquote>
<p>用分类统计一条SQL 就可以统计出结果。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现一个ftp连接池]]></title>
      <url>/2018/09/29/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAftp%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h3 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h3><h5 id="项目中使用Net-FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要-执行："><a href="#项目中使用Net-FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要-执行：" class="headerlink" title="项目中使用Net::FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要 执行："></a>项目中使用Net::FTP上传文件到服务器，有时候会出现一次性上传几十到几百不等的文件，每次上传一个文件都要 执行：</h5><p>1.创建client</p>
<p>2.连接</p>
<p>3.登录</p>
<p>4.上传文件</p>
<p>5.关闭client<br><a id="more"></a></p>
<h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><h5 id="希望能像ftp软件类似-filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）"><a href="#希望能像ftp软件类似-filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）" class="headerlink" title="希望能像ftp软件类似 filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）"></a>希望能像ftp软件类似 filezilla一样，当同时上传10个文件时，只登陆一次，上传完毕后在下线（或者被服务器踢掉）</h5><h3 id="想法："><a href="#想法：" class="headerlink" title="想法："></a>想法：</h3><p> 1.实现一个连接池</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'net/ftp'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FtpPool</span></span></div><div class="line">  <span class="keyword">include</span> Singleton</div><div class="line"></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:connections</span></div><div class="line"></div><div class="line">  semaphore = Mutex.new</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">    @connections = &#123;&#125;</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_connection</span><span class="params">(ftp_server)</span></span></div><div class="line">    key = <span class="string">"<span class="subst">#&#123;ftp_server.address&#125;</span><span class="subst">#&#123;ftp_server.port&#125;</span><span class="subst">#&#123;ftp_server.username&#125;</span>"</span></div><div class="line"></div><div class="line">    semaphore.synchronize&#123;</div><div class="line">      client = @connections[key] <span class="params">||</span> @connections[key] = Net::FTP.new</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">begin</span></div><div class="line">      client.noop</div><div class="line">    <span class="keyword">rescue</span> Exception =&gt; e</div><div class="line">      reconnect(ftp_server, client)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    client</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">reconnect</span><span class="params">(ftp_server, client)</span></span></div><div class="line">    client.connect(ftp_server.address, ftp_server.port)</div><div class="line">    client.login(ftp_server.username, ftp_server.password)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里假设传入一个 ftpserver 附带四个属性 分别是地址，端口，账号和密码；<br>用前三个属性简单的生成一个key测试一下</p>
<p>首先生成一个 ftp_pool</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; ftp_pool = FtpPool.instance</div><div class="line">=&gt; <span class="comment">#&lt;FtpPool:0x007fba931af310 @connections=&#123;&#125;&gt;</span></div></pre></td></tr></table></figure>
<p>然后调用get_connection 从连接池中获取一个连接，如果没有就新建一个</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ftp_pool.get_connection(ftp_server)</div><div class="line">=&gt; <span class="comment">#&lt;Net::FTP:0x007fa1502147a8</span></div><div class="line"> @binary=<span class="literal">true</span>,</div><div class="line"> @debug_mode=<span class="literal">false</span>,</div><div class="line"> @last_response=<span class="string">"200 OK\n"</span>,</div><div class="line"> @last_response_code=<span class="string">"200"</span>,</div><div class="line"> @logged_in=<span class="literal">true</span>,</div><div class="line"> @mon_count=0,</div><div class="line"> @mon_mutex=<span class="comment">#&lt;Thread::Mutex:0x007fa150214708&gt;,</span></div><div class="line"> @mon_owner=nil,</div><div class="line"> @open_timeout=nil,</div><div class="line"> @passive=<span class="literal">true</span>,</div><div class="line"> @read_timeout=60,</div><div class="line"> @resume=<span class="literal">false</span>,</div><div class="line"> @sock=<span class="comment">#&lt;Net::FTP::BufferedSocket io=#&lt;TCPSocket:0x007fa1511cf918&gt;&gt;,</span></div><div class="line"> @welcome=<span class="string">"230 Logged on\n"</span>&gt;</div></pre></td></tr></table></figure>
<p>这样我们就获得了一个 Net::FTP 的 client<br>可以使用然后我们用这个client 发送文件到ftp服务器，如果发送失败通过抓取异常，<br>如果异常是未连接或者未登录，就重新执行连接和登录名令后在发送文件即可。<br>这样一个简单的 ftp_pool 就可以运行了</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> FTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails在线视频播放]]></title>
      <url>/2018/04/26/rails%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<h2 id="rails网站实现在线视频播放"><a href="#rails网站实现在线视频播放" class="headerlink" title="rails网站实现在线视频播放"></a>rails网站实现在线视频播放</h2><p><img src="https://rails365.oss-cn-shenzhen.aliyuncs.com/uploads/photo/image/656/2018/2da9e44c6a2c6dd28a2d1fa6bc67a7b8.jpg" alt=""><br><a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>播放器使用 <a href="http://dplayer.js.org/#/" target="_blank" rel="external">DPlayer</a>一个好用的弹幕视频播放器。</p>
<p>首先将js文件下载后引用 application.js中添加</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//= require DPlayer.min</span></div></pre></td></tr></table></figure>
<blockquote>
<p>页面中添加</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">const</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span></div><div class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'dplayer'</span>),</span></div><div class="line"><span class="undefined">    video: &#123;</span></div><div class="line"><span class="javascript">      url: <span class="string">"&lt;%= @match.get_video_url.html_safe %&gt;"</span>,</span></div><div class="line"><span class="javascript">      pic: <span class="string">"&lt;%= @match.get_pic_url.html_safe %&gt;"</span>,</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">  &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>url 是可播放的视频地址, pic 是视频的封面图片<br>如果相接弹幕也是可以的，可以点连接后仔细了解，非常好用的视频播放器。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> Dplayer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现拖拽排序]]></title>
      <url>/2018/04/24/%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="如何在rails-中添加拖拽排序"><a href="#如何在rails-中添加拖拽排序" class="headerlink" title="如何在rails 中添加拖拽排序"></a>如何在rails 中添加拖拽排序</h2><p><img src="https://www.gadgetdaily.xyz/wp-content/uploads/2015/01/jqueryui-2.png" alt=""><br><a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>需要使用的gem</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'acts_as_list'</span></div><div class="line">gem <span class="string">'jquery-ui-rails'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>需要的js文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//= require jquery-ui/jquery-ui.js</span></div></pre></td></tr></table></figure>
<blockquote>
<p>页面添加想要排序的列表</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>视频编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">data-url</span>=<span class="string">"&lt;%= sort_admin_round_manage_good_videos_path %&gt;"</span> <span class="attr">data-behavior</span>=<span class="string">'sortable'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> @<span class="attr">good_videos.each_with_index</span> <span class="attr">do</span> |<span class="attr">g</span>, <span class="attr">index</span>| %&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"&lt;%= dom_id(g) %&gt;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">g.id</span> %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">operate_buttons</span>(<span class="attr">good_video_operation</span>(<span class="attr">g</span>)) %&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$( <span class="string">"[data-behavior='sortable']"</span> ).sortable(&#123;</span></div><div class="line"><span class="javascript">  update: <span class="function"><span class="keyword">function</span>(<span class="params">e, ui</span>) </span>&#123;</span></div><div class="line"><span class="javascript">    $.ajax(&#123;</span></div><div class="line"><span class="javascript">      url: $(<span class="keyword">this</span>).data(<span class="string">"url"</span>),</span></div><div class="line"><span class="javascript">      type: <span class="string">"PATCH"</span>,</span></div><div class="line"><span class="javascript">      data: $(<span class="keyword">this</span>).sortable(<span class="string">'serialize'</span>)</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第一种方式我们将排序后的序列整体发送到后台,后台需要添加响应的排序字段</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rails g migration AddPositionToGoodVideo position:integer</div><div class="line">rails db:migrate</div></pre></td></tr></table></figure>
<blockquote>
<p>控制器添加列表和排序action</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></div><div class="line">  @q = GoodVideo.ransack(params[<span class="symbol">:q</span>])</div><div class="line">  @good_videos = @q.result.order(<span class="symbol">position:</span> <span class="symbol">:desc</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 这里使用第一种排序方式(优点：如果position值为空或者0，在经过之后将会按排序赋值，缺点：每次排序根据当前页面数据量生成大量sql，大量操作不建议使用。)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span></span></div><div class="line">  params[<span class="symbol">:good_video</span>].reverse.each_with_index <span class="keyword">do</span> <span class="params">|id, index|</span></div><div class="line">    GoodVideo.find_by(<span class="symbol">id:</span> id).update(<span class="symbol">position:</span> index + <span class="number">1</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  head <span class="symbol">:ok</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>路由配置</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resources <span class="symbol">:good_videos</span> <span class="keyword">do</span></div><div class="line">  collection <span class="keyword">do</span></div><div class="line">    patch <span class="symbol">:sort</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>总结：第一种方法 这样既可实现拖拽排序（这种方法弊端：如果有分页的话第二页的排序会有问题，所以这种排序是不可以有分页的，所有数据只能在一个页面，也就限制了不适用太大的数据量和频繁的操作。）</p>
</blockquote>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><blockquote>
<p>页面基本保持一致 js 有一些变化,这里我们获取了当前拖拽元素id释放后的位置的前后元素的id</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"[data-behavior='sortable']"</span> ).sortable(&#123;</div><div class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">e, ui</span>) </span>&#123;</div><div class="line">    params = <span class="string">"prev_id="</span> + $(ui.item[<span class="number">0</span>]).prev().attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>] + <span class="string">"&amp;id="</span> + $(ui.item[<span class="number">0</span>]).attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>] + <span class="string">"&amp;next_id="</span> + $(ui.item[<span class="number">0</span>]).next().attr(<span class="string">"id"</span>).split(<span class="string">"_"</span>)[<span class="number">2</span>];</div><div class="line">    $.ajax(&#123;</div><div class="line">      url: $(<span class="keyword">this</span>).data(<span class="string">"url"</span>),</div><div class="line">      type: <span class="string">"PATCH"</span>,</div><div class="line">      data: params</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>排序方法也有相应修改并且position字段应采用decimal类型长度应尽量长一些，防止因长度不够，而造成多个position 都为 0.00的情况；对移动到第一位，或者最后一位做if处理。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span></span></div><div class="line">  good_video = GoodVideo.find(params[<span class="symbol">:id</span>])</div><div class="line">  next_task = params[<span class="symbol">:next_id</span>] &amp;&amp; GoodVideo.find(params[<span class="symbol">:next_id</span>])</div><div class="line">  prev_task = params[<span class="symbol">:prev_id</span>] &amp;&amp; GoodVideo.find(params[<span class="symbol">:prev_id</span>])</div><div class="line">  position = <span class="keyword">if</span> params[<span class="symbol">:prev_id</span>].blank?</div><div class="line">               next_task.position / <span class="number">2</span></div><div class="line">             <span class="keyword">elsif</span> params[<span class="symbol">:next_id</span>].blank?</div><div class="line">               prev_task.position + <span class="number">100000</span></div><div class="line">             <span class="keyword">else</span></div><div class="line">               (prev_task.position + next_task.position) / <span class="number">2</span></div><div class="line">             <span class="keyword">end</span></div><div class="line">  good_video.update(<span class="symbol">position:</span> position)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>总结：第二种方法排序生成的sql更少，仅仅通过上一位置和下一位置来生当前选择元素的排序值。分页的话也不会有问题，不过对于很多初始值就是0.0的排序来将不会给赋值，要手动拖拽后才会生成排序值。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> rails </tag>
            
            <tag> jquery </tag>
            
            <tag> jquery-ui </tag>
            
            <tag> sortable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails项目生成二维码]]></title>
      <url>/2018/01/19/rails%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="Rails-项目中将连接生成二维码"><a href="#Rails-项目中将连接生成二维码" class="headerlink" title="Rails 项目中将连接生成二维码"></a>Rails 项目中将连接生成二维码</h3><a id="more"></a>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><blockquote>
<p><code>Gemfile</code>中添加</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'rqrcode_png'</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成二维码</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print_rqrcode</span></span></div><div class="line">    html = <span class="string">""</span></div><div class="line">    <span class="keyword">require</span> <span class="string">'rqrcode'</span></div><div class="line">    host = <span class="string">"https://www.baidu.com"</span> <span class="comment"># 链接地址</span></div><div class="line">    qr = RQRCode::QRCode.new(host, <span class="symbol">:size</span> =&gt; <span class="number">10</span>, <span class="symbol">:level</span> =&gt; <span class="symbol">:h</span> )</div><div class="line">    html &lt;&lt;</div><div class="line">    <span class="string">"<span class="subst">#&#123;qr.as_svg(<span class="symbol">offset:</span> <span class="number">0</span>, <span class="symbol">color:</span> <span class="string">'000'</span>,</span></span></div><div class="line"><span class="string"><span class="subst">                 <span class="symbol">shape_rendering:</span> <span class="string">'crispEdges'</span>,</span></span></div><div class="line"><span class="string"><span class="subst">                 <span class="symbol">module_size:</span> <span class="number">2</span>)&#125;</span>"</span></div><div class="line">   <span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 二维码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails导出电子表格]]></title>
      <url>/2018/01/10/rails%E5%AF%BC%E5%87%BA%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h4 id="如何在rails应用中导出电子表格"><a href="#如何在rails应用中导出电子表格" class="headerlink" title="如何在rails应用中导出电子表格"></a>如何在<code>rails</code>应用中导出电子表格</h4><p><img src="https://www.edx.org/sites/default/files/course/image/promoted/analyzing_and_visualizing_data_with_excel_378x225.jpg" alt=""><br><a id="more"></a><br>在 <code>Gemfile</code> 中添加<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'spreadsheet'</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>假设我们要导出 项目数据：</p>
<p><code>controller</code> 中添加导出：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exprot</span></span></div><div class="line">  projects = Project.limit(<span class="number">10</span>)</div><div class="line">  send_data(Project.exprot_projects(projects), <span class="symbol">:type</span> =&gt; <span class="string">"text/excel;charset=utf-8; header=present"</span>, <span class="symbol">:filename</span> =&gt; <span class="string">"项目统计表.xls"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><code>model</code> 中添加想要导出的数据格式<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">exprot_pojects</span><span class="params">(projects)</span></span></div><div class="line">  xls_report = StringIO.new</div><div class="line">  Spreadsheet.client_encoding = <span class="string">"UTF-8"</span></div><div class="line">  book = Spreadsheet::Workbook.new</div><div class="line">  style<span class="number">0</span> = Spreadsheet::Format.new <span class="symbol">:weight</span> =&gt; <span class="symbol">:bold</span>, <span class="symbol">:size</span> =&gt; <span class="number">16</span>, <span class="symbol">:align</span> =&gt; <span class="symbol">:center</span></div><div class="line">  style = Spreadsheet::Format.new <span class="symbol">:weight</span> =&gt; <span class="symbol">:bold</span>, <span class="symbol">:size</span> =&gt; <span class="number">10</span></div><div class="line">  sheet1 = book.create_worksheet <span class="symbol">:name</span> =&gt; <span class="string">"项目统计表.xls"</span></div><div class="line">  <span class="comment"># 设置单元格高度</span></div><div class="line">  sheet1.row(<span class="number">0</span>).height = <span class="number">18</span></div><div class="line">  sheet1.row(<span class="number">0</span>).default_format = style</div><div class="line">  <span class="comment"># 设置单元格宽度</span></div><div class="line">  sheet1.column(<span class="number">0</span>).width = <span class="number">15</span></div><div class="line">  sheet1.column(<span class="number">1</span>).width = <span class="number">15</span></div><div class="line">  sheet1.row(<span class="number">0</span>).concat [<span class="string">"项目名称"</span>,<span class="string">"项目编号"</span>]</div><div class="line"></div><div class="line">  projects.each_with_index <span class="keyword">do</span> <span class="params">|project, index|</span></div><div class="line">    sheet1.row(index+<span class="number">1</span>).concat [project.name, project.number]</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  book.write xls_report</div><div class="line">  xls_report.string</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>这样在controller中调用此方法，或者传入想要导出的集合就可以导出了</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> excel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（二）]]></title>
      <url>/2017/11/20/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3942457143,1284096136&amp;fm=27&amp;gp=0.jpg" alt=""><br><a id="more"></a></p>
<p>最近有朋友有问我<code>ActiveRecord</code>中 <code>scope</code> 和 <code>validate</code> 方法的实现机制，之前一直在使用它但是我还真的没有细细的了解过这个方法，于是决定深入探究一下。</p>
<h4 id="scope-name-scope-options-public"><a href="#scope-name-scope-options-public" class="headerlink" title="scope(name, scope_options = {}) public"></a>scope(name, scope_options = {}) public</h4><blockquote>
<p>添加一个用于检索和查询对象的类方法。</p>
</blockquote>
<p>可以这样使用：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shirt</span> &lt; ActiveRecord::Base</span></div><div class="line">  scope <span class="symbol">:red</span>, where(<span class="symbol">:color</span> =&gt; <span class="string">'red'</span>)</div><div class="line">  scope <span class="symbol">:end_date</span>, -&gt;(date) &#123; where(<span class="symbol">:end_date</span> =&gt; date) &#125;</div><div class="line">  scope <span class="symbol">:dry_clean_only</span>, joins(<span class="symbol">:washing_instructions</span>).where(<span class="string">'washing_instructions.dry_clean_only = ?'</span>, <span class="literal">true</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面的调用<code>scope</code>定义了类方法<code>Shirt.red</code>和<code>Shirt.dry_clean_only</code>。 <code>Shirt.red</code>实际上代表查询<code>Shirt.where(:color =&gt;&#39;red&#39;)</code>。<br>请注意，这只是用于定义实际类方法的<code>语法糖</code></p>
</blockquote>
<p>实现的作用和类方法一样，但是类方法是在载入类的时候就会一起加载，而<code>scope</code> 定义的方法是在方法调用时才会加载<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shirt</span> &lt; ActiveRecord::Base</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">red</span></span></div><div class="line">    where(<span class="symbol">color:</span> <span class="string">'red'</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>不过需要注意的是，<code>scope</code>方法即使在什么也没查到的情况下依然会返回<code>Relation</code>对象，也就是说 <code>scope</code> 方法可以进行链式调用而不担心会抛出<code>nil:NilClass</code> 异常。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> &lt; ActiveRecord::Base</span></div><div class="line">  scope <span class="symbol">:published</span>, -&gt; &#123; where(<span class="symbol">published:</span> <span class="literal">true</span>) &#125;</div><div class="line">  scope <span class="symbol">:featured</span>, -&gt; &#123; where(<span class="symbol">featured:</span> <span class="literal">true</span>) &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">latest_article</span></span></div><div class="line">    order(<span class="string">'published_at desc'</span>).first</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">titles</span></span></div><div class="line">    pluck(<span class="symbol">:title</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我们可以这样调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Article.published.featured.latest_article</div><div class="line">Article.featured.titles</div></pre></td></tr></table></figure></p>
<p>下面看一下具体的实现源码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># File activerecord/lib/active_record/scoping/named.rb, line 141</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope</span><span class="params">(name, body, &amp;block)</span></span></div><div class="line">  <span class="keyword">unless</span> body.respond_to?(<span class="symbol">:call</span>)</div><div class="line">    raise ArgumentError, <span class="string">'The scope body needs to be callable.'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> dangerous_class_method?(name)</div><div class="line">    raise ArgumentError, <span class="string">"You tried to define a scope named \"<span class="subst">#&#123;name&#125;</span>\" "</span>                <span class="string">"on the model \"<span class="subst">#&#123;<span class="keyword">self</span>.name&#125;</span>\", but Active Record already defined "</span>                <span class="string">"a class method with the same name."</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  extension = Module.new(&amp;block) <span class="keyword">if</span> block</div><div class="line"></div><div class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name) <span class="keyword">do</span> <span class="params">|*args|</span></div><div class="line">    scope = all.scoping &#123; body.call(*args) &#125;</div><div class="line">    scope = scope.extending(extension) <span class="keyword">if</span> extension</div><div class="line"></div><div class="line">    scope <span class="params">||</span> all</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>除去数据验证以外，值得关注的方法就是<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">singleton_class.send(<span class="symbol">:define_method</span>, name)</div></pre></td></tr></table></figure></p>
<p>这一句实现了将传入的方法名定义成一个类方法的过程，我们试着简易的实现以下<code>scope</code> 方法的原理</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">scope</span><span class="params">(name, body)</span></span></div><div class="line">  singleton_class.send(<span class="symbol">:define_method</span>, name, &amp;body)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>参数接受名字和代码块，然后将名字定义为方法名，代码块作为方法内部可执行代码。这样我们就简易的实现了<code>scope</code>这个方法。</p>
<p>这时候scope 的内部实现机制就算比较了解了，但是我对这个<code>singleton_class</code> 非常好奇，它是如何实现的呢？</p>
<h4 id="singleton-class-→-class"><a href="#singleton-class-→-class" class="headerlink" title="singleton_class → class"></a>singleton_class → class</h4><blockquote>
<p>返回obj的单例类。 如果obj没有，则此方法创建一个新的单例类。<br>如果obj为nil，true或false，则分别返回NilClass，TrueClass或FalseClass。 如果obj是一个Fixnum或一个符号，它会引发一个TypeError。</p>
</blockquote>
<p>我们可以这么用它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object.new.singleton_class  #=&gt; #&lt;Class:#&lt;Object:0xb7ce1e24&gt;&gt;</div><div class="line">String.singleton_class      #=&gt; #&lt;Class:String&gt;</div><div class="line">nil.singleton_class         #=&gt; NilClass</div></pre></td></tr></table></figure></p>
<p>那么<code>scope</code> 就算是告一段落，算是浅尝辄止，下次我们要仔细的研究一下<code>singleton_class</code>，下一步看看<code>validate</code>的实现机制。</p>
<h4 id="validate-methods-amp-block-public"><a href="#validate-methods-amp-block-public" class="headerlink" title="validate(*methods, &amp;block) public"></a>validate(*methods, &amp;block) public</h4><blockquote>
<p>向类中添加验证方法或块。 当重写#validate实例方法变得过于强硬时，这是很有用的，而且您正在寻找更多关于验证的描述性声明。<br>这可以通过一个指向方法的符号来完成：</p>
</blockquote>
<p>这个非常常用的校验方法，我们经常这样用：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ActiveRecord::Base</span></div><div class="line">  validate <span class="symbol">:must_be_friends</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">must_be_friends</span></span></div><div class="line">    errors.add_to_base(<span class="string">"Must be friends to leave a comment"</span>) <span class="keyword">unless</span> commenter.friend_of?(commentee)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>或者用一个传递当前记录的块进行验证：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ActiveRecord::Base</span></div><div class="line">  validate <span class="keyword">do</span> <span class="params">|comment|</span></div><div class="line">    comment.must_be_friends</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">must_be_friends</span></span></div><div class="line">    errors.add_to_base(<span class="string">"Must be friends to leave a comment"</span>) <span class="keyword">unless</span> commenter.friend_of?(commentee)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>看得出这里 参数接受方法或者代码块，然后定义了一个实例方法，当实例不满足校验条件时，将会抛出异常。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ruby笔记（一）]]></title>
      <url>/2017/11/14/ruby%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511244769207&amp;di=97fe709abd32e51b037c5bf3d37b8e4b&amp;imgtype=0&amp;src=http%3A%2F%2Ftc.sinaimg.cn%2Fmaxwidth.2048%2Ftc.service.weibo.com%2Fp3_pstatp_com%2Fe59d73299cfdc86f63ef07248bad7bd3.jpg" alt=""><br><a id="more"></a></p>
<p>记录一下自己在工作当中会用到 的一些比较好用的方法</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="step"><a href="#step" class="headerlink" title="step"></a>step</h4><p><code>ruby2.X</code> 中我们这么用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; range = 1..10</div><div class="line">=&gt; 1..10</div><div class="line">pry(main)&gt; range.step(2) &#123;|x| puts x&#125;</div><div class="line">1</div><div class="line">3</div><div class="line">5</div><div class="line">7</div><div class="line">9</div><div class="line">=&gt; 1..10</div></pre></td></tr></table></figure></p>
<ul>
<li>创建一个1-10差为2的等差数列，有时也可以这么用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; 0.step(10, 2) &#123;|x| puts x&#125;</div><div class="line">0</div><div class="line">2</div><div class="line">4</div><div class="line">6</div><div class="line">8</div><div class="line">10</div><div class="line">=&gt; 0</div></pre></td></tr></table></figure>
<p>和上面的方法是一样的作用。</p>
<h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><ul>
<li>将字符串当做代码执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; str = &quot;hello&quot;</div><div class="line">=&gt; &quot;hello&quot;</div><div class="line">pry(main)&gt; eval &quot;str + &apos; Fred&apos;&quot;</div><div class="line">=&gt; &quot;hello Fred&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="camelize-amp-underscore"><a href="#camelize-amp-underscore" class="headerlink" title="camelize &amp; underscore"></a>camelize &amp; underscore</h4><p>蛇形和驼峰的互换</p>
<ul>
<li>camelize将蛇形转换为驼峰</li>
<li>underscore将驼峰转换为蛇形</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &apos;user_mailer&apos;.camelize</div><div class="line">=&gt; &quot;UserMailer&quot;</div><div class="line">pry(main)&gt; &quot;UserMailer&quot;.underscore</div><div class="line">=&gt; &quot;user_mailer&quot;</div></pre></td></tr></table></figure>
<p>采用正则转换</p>
<h4 id="constantize"><a href="#constantize" class="headerlink" title="constantize"></a>constantize</h4><p>将驼峰转换为类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &quot;UserMailer&quot;.constantize</div><div class="line">=&gt; UserMailer</div><div class="line">pry(main)&gt; &quot;UserMailer&quot;.constantize.class</div><div class="line">=&gt; Class</div></pre></td></tr></table></figure>
<p>如果想要转换的类不存在，将会抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &quot;AserMailer&quot;.constantize.class</div><div class="line">NameError: uninitialized constant AserMailer</div></pre></td></tr></table></figure></p>
<h4 id="reduce-amp-inject"><a href="#reduce-amp-inject" class="headerlink" title="reduce &amp; inject"></a>reduce &amp; inject</h4><p>官方示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; (5..10).reduce(:+)</div><div class="line">=&gt; 45</div><div class="line">pry(main)&gt; (5..10).inject &#123;|sum, n| sum + n &#125;</div><div class="line">=&gt; 45</div><div class="line">pry(main)&gt; (5..10).reduce(1, :*)</div><div class="line">=&gt; 151200</div><div class="line">pry(main)&gt; (5..10).inject(1) &#123;|product, n| product * n &#125;</div><div class="line">=&gt; 151200</div></pre></td></tr></table></figure></p>
<p>这两个方法在使用上看起来不太一样，但是在结果上是一致的。</p>
<h4 id="map-amp"><a href="#map-amp" class="headerlink" title="map(&amp;:)"></a>map(&amp;:)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(5..10).map(&amp;:to_s)</div><div class="line">=&gt; [&quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]</div><div class="line">(5..10).map &#123;|i| i.to_s &#125;</div><div class="line">=&gt; [&quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;]</div></pre></td></tr></table></figure>
<h4 id="hash-invert"><a href="#hash-invert" class="headerlink" title="hash.invert"></a>hash.invert</h4><p>互换hash 键和值的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; &#123;&quot;1&quot;=&gt;&quot;hello&quot;, &quot;2&quot;=&gt;&quot;dear&quot;&#125;.invert</div><div class="line">=&gt; &#123;&quot;hello&quot;=&gt;&quot;1&quot;, &quot;dear&quot;=&gt;&quot;2&quot;&#125;</div></pre></td></tr></table></figure>
<h4 id="array-zip"><a href="#array-zip" class="headerlink" title="array.zip"></a>array.zip</h4><p>将两个一维数组转换为二维数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pry(main)&gt; %w(供应商 供应商1 供应商2).zip([1, 2, 3])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2], [&quot;供应商2&quot;, 3]]</div><div class="line">pry(main)&gt; %w(供应商 供应商1 供应商2).zip([1, 2])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2], [&quot;供应商2&quot;, nil]]</div><div class="line">pry(main)&gt; %w(供应商 供应商1).zip([1, 2, 3])</div><div class="line">=&gt; [[&quot;供应商&quot;, 1], [&quot;供应商1&quot;, 2]]</div></pre></td></tr></table></figure>
<p>重新生成的数组长度以第一个数组为准，后者缺少的值以<code>nil</code>代替，后者多余的会直接丢弃。</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提问的智慧]]></title>
      <url>/2017/10/31/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      <content type="html"><![CDATA[<p>提问的智慧</p>
<p>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</p>
<p><a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="external">https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>
<p>初入ruby china 后就阅读过，偶尔还是会再次的拿出来看一看。每一次看后都有新的思路出现。值得一看。<br><a id="more"></a></p>
<blockquote>
<p>这是一篇长文，看完需要十几分钟的时间。如果之前没有认真看过并且思考过，这十几分钟会改变你的职业生涯。这文章可能会出现一些让人不适的词语或者过时的例子，但我认为这不会影响它要表达的内容，而你需要好好琢磨作者的思想。</p>
<p>《提问的智慧》是一个敲门砖，它把黑客间的礼仪和准则明白地写下来，让我们了解到一个事实，为什么那些看起来很牛的人几乎从不提问。其实他们也有问题，但是通常在提问之前就自己解决了。不是因为他们本来就牛，而是解决问题的经历让他们成为牛人。最终，你只会看到网络上多了一篇文章：关于解决XXX问题的方案。</p>
<p>要不要花十几分钟改变自己的人生，决定权在自己。 – RubyChina  @Rei</p>
</blockquote>
<p><a href="https://ruby-china.org/topics/24325" target="_blank" rel="external">原文链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用githooks让博客实现自动部署]]></title>
      <url>/2017/10/27/%E5%88%A9%E7%94%A8githooks%E8%AE%A9%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>为了不让这个vps太过于浪费，不让自己名字命名的域名浪费了，所以决定搭建一个博客在这里。整理一下搭建的过程当做记录。</p>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>一台服务器，一台可以连接服务器的电脑<br><a id="more"></a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这里采用了hexo作为静态页面生成器，hexo的使用教程请点击这里<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external">hexo使用文档</a></p>
<h2 id="服务器nginx配置"><a href="#服务器nginx配置" class="headerlink" title="服务器nginx配置"></a>服务器nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  root /home/wwwroot/hexo;  #网站根目录,用来存储网站文件</div><div class="line">  index index.html index.htm;</div><div class="line">  server_name www.qingyu.ren;   #你的域名</div><div class="line">  location / &#123;</div><div class="line">    try_files $uri $uri/ /index.html;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Git-hooks-post-receive-配置"><a href="#Git-hooks-post-receive-配置" class="headerlink" title="Git hooks post-receive 配置"></a>Git hooks post-receive 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash -l</div><div class="line">GIT_REPO=/home/git/hexo.git # git 仓库</div><div class="line">TMP_GIT_CLONE=/git/tmp/hexo_tmp</div><div class="line">PUBLIC_WWW=/home/wwwroot/hexo  # 网站存放目录</div><div class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</div><div class="line">git clone $GIT_REPO $TMP_GIT_CLONE</div><div class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</div><div class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</div></pre></td></tr></table></figure>
<p>这个文件要加上可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x post-receive</div></pre></td></tr></table></figure></p>
<p>改变hexo.git的所属用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R git:git blog.git</div></pre></td></tr></table></figure></p>
<h2 id="将本地ssh公钥上传到服务器"><a href="#将本地ssh公钥上传到服务器" class="headerlink" title="将本地ssh公钥上传到服务器"></a>将本地ssh公钥上传到服务器</h2><p>将 本机<code>~/.ssh/id_rsa.pub</code>里的内容复制到 服务器 <code>~/.ssh/authorized_keys</code>里面<br>这样就可以不用密码登录了</p>
<h2 id="本地项目配置-config-yml"><a href="#本地项目配置-config-yml" class="headerlink" title="本地项目配置 _config.yml"></a>本地项目配置 _config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  message: update</div><div class="line">  repo: ssh://git@你的域名:端口/~/hexo.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>这样在写完blog 的时候 执行hexo d 就会自动部署了</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为服务器安装中文字体]]></title>
      <url>/2017/10/26/%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<h2 id="给服务器安装中文字体"><a href="#给服务器安装中文字体" class="headerlink" title="给服务器安装中文字体"></a>给服务器安装中文字体</h2><p>rails上的一个html生成pdf功能在mac环境下生成了正常的pdf，但是部署到服务器后生成的pdf出现了乱码，<br>分析乱码后发现 数字和英文字母还在，只有汉字不见了，所以判断是服务器没有安装中文字体的缘故。<br>这里安装两种开源的中文字体 文泉驿微米黑和文泉驿正黑字体。<br><a id="more"></a><br>服务器系统是 redhat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install wqy-microhei-fonts wqy-zenhei-fonts</div></pre></td></tr></table></figure>
<p>安装后生成pdf 就正常了。</p>
]]></content>
      
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为rails 项目搭建elasticsearch服务]]></title>
      <url>/2017/09/06/%E4%B8%BArails-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BAelasticsearch%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="为-rails-本地项目搭建-elasticsearch-服务"><a href="#为-rails-本地项目搭建-elasticsearch-服务" class="headerlink" title="为 rails 本地项目搭建  elasticsearch  服务"></a>为 rails 本地项目搭建  elasticsearch  服务</h2><h3 id="首先安装-elasticsearch-服务"><a href="#首先安装-elasticsearch-服务" class="headerlink" title="首先安装  elasticsearch  服务"></a>首先安装  elasticsearch  服务</h3><p>OSX  系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew install elasticsearch@2.4</div><div class="line">brew services start elasticsearch</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>测试服务是否启动<br>浏览器输入 localhost:9200<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;Lynx&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch_marin&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;acE95aJmQxuMz0cx47b2WQ&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;2.4.6&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;5376dca9f70f3abef96a77f4bb22720ace8240fd&quot;,</div><div class="line">    &quot;build_timestamp&quot; : &quot;2017-07-18T12:17:44Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;5.5.4&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>出现类似上述信息 number 表示当前  elasticsearch  的版本号，需要注意的是  elasticsearch  现在分为 v2+ 和 v5+  两个版本，要根据自己的版本来选择  searchkick  对应的版本是否合适</p>
<h3 id="gemfile中-引用-searchkick"><a href="#gemfile中-引用-searchkick" class="headerlink" title="gemfile中  引用  searchkick"></a>gemfile中  引用  searchkick</h3><p>这里我们是使用了 1.3.3 版本的<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'searchkick'</span>, <span class="string">'1.3.3'</span></div></pre></td></tr></table></figure></p>
<h3 id="model-中引用searchkick"><a href="#model-中引用searchkick" class="headerlink" title="model 中引用searchkick"></a>model 中引用searchkick</h3><p>现在我们已经有搜索服务了，现在要配置需要搜索的  model<br>在  model  中引用  searchkick</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全文检索  searchkick</span></div><div class="line">searchkick</div></pre></td></tr></table></figure>
<p>给  products  表重建索引<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Product.reindex</div></pre></td></tr></table></figure></p>
<p>进行搜索<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">products = Product.search <span class="string">"apples"</span></div></pre></td></tr></table></figure></p>
<p>这时就会得到结果集。<br>如果是简单的应用到这里就可以满足要求 ，当然我们有时候需要一些个性化的配置。</p>
<h3 id="给部分字段建立索引"><a href="#给部分字段建立索引" class="headerlink" title="给部分字段建立索引"></a>给部分字段建立索引</h3><p>reindex 方法会默认给所有的字段建立索引，但是由于字段过长，或者性能原因我们只需要部分字段有索引 可以这样：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_data</span></span></div><div class="line">  &#123; <span class="symbol">name:</span> name &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>重写  search_data 方法加入name 这样就只给  name  字段打索引了</p>
<h3 id="关联表建索引"><a href="#关联表建索引" class="headerlink" title="关联表建索引"></a>关联表建索引</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Catalog</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_many <span class="symbol">:products</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:catalog</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_data</span></span></div><div class="line">  &#123; <span class="symbol">name:</span> name &#125;.merge&#123; <span class="symbol">catalog_name:</span> catalog.name &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里 我们给  product  表添加一个索引叫做 分类名称  catalog_name<br>这样搜索分类名称就可以搜索出 同一个分类的 商品列表了</p>
<h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Product.search key</div></pre></td></tr></table></figure>
<p>这个方法会默认搜索 所有的字段 并返回 所有包含  key  的结果集。<br>如果我们想搜索指定的字段该如何设置呢？</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">elasticsearch</span><span class="params">(params = &#123;&#125;, options = &#123;&#125;)</span></span></div><div class="line">  key = params[<span class="symbol">:key</span>].blank? ? <span class="string">"*"</span> : params[<span class="symbol">:key</span>] <span class="comment"># 关键字</span></div><div class="line">  params[<span class="symbol">:page</span>] <span class="params">||</span>= <span class="number">1</span> <span class="comment"># 分页</span></div><div class="line">  params[<span class="symbol">:per_page</span>] <span class="params">||</span>= <span class="number">20</span> <span class="comment"># 每页条数</span></div><div class="line">  where_hash = &#123;</div><div class="line">    <span class="symbol">status:</span> <span class="string">'success'</span>, <span class="comment"># 固定筛选值</span></div><div class="line">  &#125;</div><div class="line">  conditions = &#123;<span class="symbol">where:</span> where_hash&#125;</div><div class="line">  conditions[<span class="symbol">:page</span>] = params[<span class="symbol">:page</span>]</div><div class="line">  conditions[<span class="symbol">:per_page</span>] = params[<span class="symbol">:per_page</span>]</div><div class="line">  search key, conditions</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这样 就相当于给结果集添加  scope，和分页效果，前端配合  kaminari  就可以实现分页效果了<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@articles = Product.elasticsearch(params)</div></pre></td></tr></table></figure></p>
<p>action  中将设定好的参数传入就可以得到结果集了</p>
<p> QWQ~!!</p>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell]]></title>
      <url>/2017/08/31/shell/</url>
      <content type="html"><![CDATA[<p>vps 设置系统定时重启， ssserver 开机启动</p>
<p>首先先编写开启启动ssserver 脚本<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</div></pre></td></tr></table></figure></p>
<p>P 服务端口<br>K密码m 加密方式 我们选择 比较快速的rc4-md5 放弃了aes-256<br>user 选择 nobody 然后 把这段话保存 为 shadowsocks.sh</p>
<p>将其放在 /opt 目录下</p>
<p>打开开机自启配置文件 <code>vim /etc/rc.local</code></p>
<p>将 <code>/opt/./shadowsocks.sh</code> 这句放在最下方 保存退出<br>执行 <code>source ~/etc/rc.local</code> 让配置生效</p>
<p>crontab -l 查看当前在执行的 定时任务</p>
<p>crontab -e 编辑定时任务</p>
<p>在最下方加 <code>0 13 * * * /sbin/reboot</code></p>
<p>每天的13点重启vps， 因为vps 是美国服务器 有时差 所以13点应该是中国的凌晨 刚刚好</p>
<p>然后 <code>*/5 * * * * ./shadowsocks.sh</code></p>
<p>每5分钟就检测一次 ssserver 如果没有进程 就启动一遍，有就不执行</p>
<p>保存退出</p>
<p>重启vps</p>
<p>登录 vps 输入 top</p>
<p>查看到 ssserver 服务已经启动</p>
<p>说明已经生效了 OK</p>
]]></content>
      
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rails-mailer]]></title>
      <url>/2017/08/31/reila-mailer/</url>
      <content type="html"><![CDATA[<blockquote>
<p>app/mailer 文件夹创建mailer.rb文件</p>
</blockquote>
<a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMailer</span> &lt; ActionMailer::Base</span></div><div class="line">  default <span class="symbol">:from</span> =&gt; <span class="string">"测试邮件 &lt;此处填写发件邮箱&gt;"</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(email, subject)</span></span></div><div class="line">     mail(<span class="symbol">to:</span> email, <span class="symbol">subject:</span> subject)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/intializers 创建setup_mail.rb</p>
</blockquote>
<p>发送邮件服务器的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- encoding : utf-8 -*-</div><div class="line"></div><div class="line">ActionMailer::Base.smtp_settings = &#123;</div><div class="line">    :address              =&gt; Settings.email.address,</div><div class="line">    :port                 =&gt; Settings.email.port,</div><div class="line">    :domain               =&gt; Settings.email.domain,</div><div class="line">    :user_name            =&gt; Settings.email.user_name,</div><div class="line">    :password             =&gt; Settings.email.password,</div><div class="line">    :authentication       =&gt; Settings.email.authentication,</div><div class="line">    :ssl =&gt; true,</div><div class="line">    :enable_starttls_auto =&gt; true</div><div class="line">&#125;</div><div class="line"></div><div class="line">ActionMailer::Base.default_url_options = &#123; host: Setting.host &#125;</div><div class="line"></div><div class="line"># development</div><div class="line"># ActionMailer::Base.default_url_options[:host] = &quot;localhost:3000&quot;</div><div class="line"># ActionMailer::Base.delivery_method = :letter_opener</div></pre></td></tr></table></figure>
<blockquote>
<p>settings.yml 添加配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">email:</div><div class="line">    address: &quot;smtp.qq.com&quot;</div><div class="line">    port: 25</div><div class="line">    domain: &quot;sinopr.org&quot;</div><div class="line">    user_name: &quot;登录名&quot;</div><div class="line">    password: &quot;密码&quot;</div><div class="line">    authentication: &quot;login&quot;</div><div class="line">    host: &apos;路径&apos;</div><div class="line">    mail_from: &apos;xxx@qq.com&apos;</div></pre></td></tr></table></figure>
<p>如果是smtp 服务要保证 邮箱开启了此类服务，部分邮箱开启此类服务后 会给予授权码，如果有授权码，在password 后要填写此授权码 。</p>
<blockquote>
<p>app/user_mailer 下创建 send_email.html.erb, 里面写入想要发送的内容。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[Tagcloud]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[博主简介]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul>
<li>Email: marinren#qq.com</li>
<li>Github: <a href="https://github.com/Kevinqingyu" target="_blank" rel="external">任清宇的Github仓库</a></li>
</ul>
<h3 id="工作状况"><a href="#工作状况" class="headerlink" title="工作状况"></a>工作状况</h3><ul>
<li>目前就职于<a href="https://www.pantrysbest.com/" target="_blank" rel="external">派悦坊</a></li>
</ul>
<h3 id="过往项目"><a href="#过往项目" class="headerlink" title="过往项目"></a>过往项目</h3><ul>
<li><a href="http://www.meie.com.cn/" target="_blank" rel="external">神华e购网</a></li>
<li><a href="http://www.govbuy.cn/" target="_blank" rel="external">阳光公采云商城</a></li>
</ul>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><ul>
<li>Ruby</li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul>
<li>Rails</li>
<li>vue</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>Mysql</li>
<li>Oracle</li>
<li>Redis</li>
</ul>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li>Mac OS</li>
<li>Ubuntu</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>Nginx</li>
<li>Git</li>
<li>Linux</li>
<li>Engine</li>
<li>jQuery</li>
<li>Sidekiq</li>
<li>rabbitmq</li>
</ul>
]]></content>
    </entry>
    
  
</search>
